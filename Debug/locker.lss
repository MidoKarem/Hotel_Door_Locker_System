
locker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003702  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00003702  00003776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003714  00000000  00000000  00003814  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000129f  00000000  00000000  00006f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000081c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00008307  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00008477  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000afab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000bd58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000beb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000c145  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <main>
      7a:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 ee       	ldi	r26, 0xE6	; 230
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 64 1b 	jmp	0x36c8	; 0x36c8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 ee       	ldi	r24, 0xE6	; 230
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 64 1b 	jmp	0x36c8	; 0x36c8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 74 1b 	jmp	0x36e8	; 0x36e8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <System_init>:
#include "locker.h"
#include<util/delay.h>
#define F_CPU 8000000UL

void System_init()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	keypad_voidInit();
     b3e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <keypad_voidInit>
	BuzzerINIT();
     b42:	0e 94 9b 14 	call	0x2936	; 0x2936 <BuzzerINIT>
	EEPROM_Init();
     b46:	0e 94 53 14 	call	0x28a6	; 0x28a6 <EEPROM_Init>
	LCD_voidINST();
     b4a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <LCD_voidINST>
	LED_INIT();
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <checkMemory>:

void checkMemory()
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	00 d0       	rcall	.+0      	; 0xb64 <checkMemory+0x6>
     b64:	00 d0       	rcall	.+0      	; 0xb66 <checkMemory+0x8>
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	/* Read memory locations that hold the password */
	u8 data[4];
	EEPROM_ReadData(10,&data[0]);
     b6a:	8a e0       	ldi	r24, 0x0A	; 10
     b6c:	9e 01       	movw	r18, r28
     b6e:	2f 5f       	subi	r18, 0xFF	; 255
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	b9 01       	movw	r22, r18
     b74:	0e 94 79 14 	call	0x28f2	; 0x28f2 <EEPROM_ReadData>

	EEPROM_ReadData(11,&data[1]);
     b78:	9e 01       	movw	r18, r28
     b7a:	2e 5f       	subi	r18, 0xFE	; 254
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	8b e0       	ldi	r24, 0x0B	; 11
     b80:	b9 01       	movw	r22, r18
     b82:	0e 94 79 14 	call	0x28f2	; 0x28f2 <EEPROM_ReadData>

	EEPROM_ReadData(12,&data[2]);
     b86:	9e 01       	movw	r18, r28
     b88:	2d 5f       	subi	r18, 0xFD	; 253
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	8c e0       	ldi	r24, 0x0C	; 12
     b8e:	b9 01       	movw	r22, r18
     b90:	0e 94 79 14 	call	0x28f2	; 0x28f2 <EEPROM_ReadData>

	EEPROM_ReadData(13,&data[3]);
     b94:	9e 01       	movw	r18, r28
     b96:	2c 5f       	subi	r18, 0xFC	; 252
     b98:	3f 4f       	sbci	r19, 0xFF	; 255
     b9a:	8d e0       	ldi	r24, 0x0D	; 13
     b9c:	b9 01       	movw	r22, r18
     b9e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <EEPROM_ReadData>

	/* First time to use EEPROM default values are 255. Make initial password to be 0000 */
	//if ((data[0] == 255) && (data[1] == 255) && (data[2] == 255) && (data[3] == 255))
	{
		EEPROM_WriteData(10, '0');
     ba2:	8a e0       	ldi	r24, 0x0A	; 10
     ba4:	60 e3       	ldi	r22, 0x30	; 48
     ba6:	0e 94 5d 14 	call	0x28ba	; 0x28ba <EEPROM_WriteData>
		EEPROM_WriteData(11, '0');
     baa:	8b e0       	ldi	r24, 0x0B	; 11
     bac:	60 e3       	ldi	r22, 0x30	; 48
     bae:	0e 94 5d 14 	call	0x28ba	; 0x28ba <EEPROM_WriteData>
		EEPROM_WriteData(12, '0');
     bb2:	8c e0       	ldi	r24, 0x0C	; 12
     bb4:	60 e3       	ldi	r22, 0x30	; 48
     bb6:	0e 94 5d 14 	call	0x28ba	; 0x28ba <EEPROM_WriteData>
		EEPROM_WriteData(13,'0');
     bba:	8d e0       	ldi	r24, 0x0D	; 13
     bbc:	60 e3       	ldi	r22, 0x30	; 48
     bbe:	0e 94 5d 14 	call	0x28ba	; 0x28ba <EEPROM_WriteData>
	}
}
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <enterPassword>:

u8 enterPassword ()
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	a7 97       	sbiw	r28, 0x27	; 39
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
	u8 passwordEntered [4], passwordSaved [4];

	/* Get the 4 chars of the password from keypad */
	for(u8 t = 0; t < 4; t++)
     be4:	1e 8e       	std	Y+30, r1	; 0x1e
     be6:	8a c0       	rjmp	.+276    	; 0xcfc <enterPassword+0x12c>
	{
		u8 key = '$';
     be8:	84 e2       	ldi	r24, 0x24	; 36
     bea:	8d 8f       	std	Y+29, r24	; 0x1d

		l1:key=keypad_u8GetPressedkey();
     bec:	0e 94 8b 13 	call	0x2716	; 0x2716 <keypad_u8GetPressedkey>
     bf0:	8d 8f       	std	Y+29, r24	; 0x1d
		if(key == '$') { goto l1;}
     bf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bf4:	84 32       	cpi	r24, 0x24	; 36
     bf6:	d1 f3       	breq	.-12     	; 0xbec <enterPassword+0x1c>

		passwordEntered[t] = key;
     bf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	ce 01       	movw	r24, r28
     c00:	4f 96       	adiw	r24, 0x1f	; 31
     c02:	fc 01       	movw	r30, r24
     c04:	e2 0f       	add	r30, r18
     c06:	f3 1f       	adc	r31, r19
     c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0a:	80 83       	st	Z, r24
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a8 ec       	ldi	r26, 0xC8	; 200
     c12:	b2 e4       	ldi	r27, 0x42	; 66
     c14:	89 8f       	std	Y+25, r24	; 0x19
     c16:	9a 8f       	std	Y+26, r25	; 0x1a
     c18:	ab 8f       	std	Y+27, r26	; 0x1b
     c1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c1c:	69 8d       	ldd	r22, Y+25	; 0x19
     c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	4a ef       	ldi	r20, 0xFA	; 250
     c2a:	54 e4       	ldi	r21, 0x44	; 68
     c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	8d 8b       	std	Y+21, r24	; 0x15
     c36:	9e 8b       	std	Y+22, r25	; 0x16
     c38:	af 8b       	std	Y+23, r26	; 0x17
     c3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c3c:	6d 89       	ldd	r22, Y+21	; 0x15
     c3e:	7e 89       	ldd	r23, Y+22	; 0x16
     c40:	8f 89       	ldd	r24, Y+23	; 0x17
     c42:	98 8d       	ldd	r25, Y+24	; 0x18
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e8       	ldi	r20, 0x80	; 128
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c50:	88 23       	and	r24, r24
     c52:	2c f4       	brge	.+10     	; 0xc5e <enterPassword+0x8e>
		__ticks = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9c 8b       	std	Y+20, r25	; 0x14
     c5a:	8b 8b       	std	Y+19, r24	; 0x13
     c5c:	3f c0       	rjmp	.+126    	; 0xcdc <enterPassword+0x10c>
	else if (__tmp > 65535)
     c5e:	6d 89       	ldd	r22, Y+21	; 0x15
     c60:	7e 89       	ldd	r23, Y+22	; 0x16
     c62:	8f 89       	ldd	r24, Y+23	; 0x17
     c64:	98 8d       	ldd	r25, Y+24	; 0x18
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	3f ef       	ldi	r19, 0xFF	; 255
     c6a:	4f e7       	ldi	r20, 0x7F	; 127
     c6c:	57 e4       	ldi	r21, 0x47	; 71
     c6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c72:	18 16       	cp	r1, r24
     c74:	4c f5       	brge	.+82     	; 0xcc8 <enterPassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c76:	69 8d       	ldd	r22, Y+25	; 0x19
     c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e2       	ldi	r20, 0x20	; 32
     c84:	51 e4       	ldi	r21, 0x41	; 65
     c86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9c 8b       	std	Y+20, r25	; 0x14
     c9c:	8b 8b       	std	Y+19, r24	; 0x13
     c9e:	0f c0       	rjmp	.+30     	; 0xcbe <enterPassword+0xee>
     ca0:	88 ec       	ldi	r24, 0xC8	; 200
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9a 8b       	std	Y+18, r25	; 0x12
     ca6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca8:	89 89       	ldd	r24, Y+17	; 0x11
     caa:	9a 89       	ldd	r25, Y+18	; 0x12
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <enterPassword+0xdc>
     cb0:	9a 8b       	std	Y+18, r25	; 0x12
     cb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb4:	8b 89       	ldd	r24, Y+19	; 0x13
     cb6:	9c 89       	ldd	r25, Y+20	; 0x14
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	9c 8b       	std	Y+20, r25	; 0x14
     cbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbe:	8b 89       	ldd	r24, Y+19	; 0x13
     cc0:	9c 89       	ldd	r25, Y+20	; 0x14
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	69 f7       	brne	.-38     	; 0xca0 <enterPassword+0xd0>
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <enterPassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc8:	6d 89       	ldd	r22, Y+21	; 0x15
     cca:	7e 89       	ldd	r23, Y+22	; 0x16
     ccc:	8f 89       	ldd	r24, Y+23	; 0x17
     cce:	98 8d       	ldd	r25, Y+24	; 0x18
     cd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	9c 8b       	std	Y+20, r25	; 0x14
     cda:	8b 8b       	std	Y+19, r24	; 0x13
     cdc:	8b 89       	ldd	r24, Y+19	; 0x13
     cde:	9c 89       	ldd	r25, Y+20	; 0x14
     ce0:	98 8b       	std	Y+16, r25	; 0x10
     ce2:	8f 87       	std	Y+15, r24	; 0x0f
     ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce6:	98 89       	ldd	r25, Y+16	; 0x10
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <enterPassword+0x118>
     cec:	98 8b       	std	Y+16, r25	; 0x10
     cee:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		LCD_voidsendDATA('*');
     cf0:	8a e2       	ldi	r24, 0x2A	; 42
     cf2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
u8 enterPassword ()
{
	u8 passwordEntered [4], passwordSaved [4];

	/* Get the 4 chars of the password from keypad */
	for(u8 t = 0; t < 4; t++)
     cf6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	8e 8f       	std	Y+30, r24	; 0x1e
     cfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	08 f4       	brcc	.+2      	; 0xd04 <enterPassword+0x134>
     d02:	72 cf       	rjmp	.-284    	; 0xbe8 <enterPassword+0x18>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	aa e7       	ldi	r26, 0x7A	; 122
     d0a:	b4 e4       	ldi	r27, 0x44	; 68
     d0c:	8b 87       	std	Y+11, r24	; 0x0b
     d0e:	9c 87       	std	Y+12, r25	; 0x0c
     d10:	ad 87       	std	Y+13, r26	; 0x0d
     d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d14:	6b 85       	ldd	r22, Y+11	; 0x0b
     d16:	7c 85       	ldd	r23, Y+12	; 0x0c
     d18:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	4a ef       	ldi	r20, 0xFA	; 250
     d22:	54 e4       	ldi	r21, 0x44	; 68
     d24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	8f 83       	std	Y+7, r24	; 0x07
     d2e:	98 87       	std	Y+8, r25	; 0x08
     d30:	a9 87       	std	Y+9, r26	; 0x09
     d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d34:	6f 81       	ldd	r22, Y+7	; 0x07
     d36:	78 85       	ldd	r23, Y+8	; 0x08
     d38:	89 85       	ldd	r24, Y+9	; 0x09
     d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e8       	ldi	r20, 0x80	; 128
     d42:	5f e3       	ldi	r21, 0x3F	; 63
     d44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d48:	88 23       	and	r24, r24
     d4a:	2c f4       	brge	.+10     	; 0xd56 <enterPassword+0x186>
		__ticks = 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
     d54:	3f c0       	rjmp	.+126    	; 0xdd4 <enterPassword+0x204>
	else if (__tmp > 65535)
     d56:	6f 81       	ldd	r22, Y+7	; 0x07
     d58:	78 85       	ldd	r23, Y+8	; 0x08
     d5a:	89 85       	ldd	r24, Y+9	; 0x09
     d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	3f ef       	ldi	r19, 0xFF	; 255
     d62:	4f e7       	ldi	r20, 0x7F	; 127
     d64:	57 e4       	ldi	r21, 0x47	; 71
     d66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d6a:	18 16       	cp	r1, r24
     d6c:	4c f5       	brge	.+82     	; 0xdc0 <enterPassword+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d70:	7c 85       	ldd	r23, Y+12	; 0x0c
     d72:	8d 85       	ldd	r24, Y+13	; 0x0d
     d74:	9e 85       	ldd	r25, Y+14	; 0x0e
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e2       	ldi	r20, 0x20	; 32
     d7c:	51 e4       	ldi	r21, 0x41	; 65
     d7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	bc 01       	movw	r22, r24
     d88:	cd 01       	movw	r24, r26
     d8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	9e 83       	std	Y+6, r25	; 0x06
     d94:	8d 83       	std	Y+5, r24	; 0x05
     d96:	0f c0       	rjmp	.+30     	; 0xdb6 <enterPassword+0x1e6>
     d98:	88 ec       	ldi	r24, 0xC8	; 200
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9c 83       	std	Y+4, r25	; 0x04
     d9e:	8b 83       	std	Y+3, r24	; 0x03
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <enterPassword+0x1d4>
     da8:	9c 83       	std	Y+4, r25	; 0x04
     daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	9e 83       	std	Y+6, r25	; 0x06
     db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	69 f7       	brne	.-38     	; 0xd98 <enterPassword+0x1c8>
     dbe:	14 c0       	rjmp	.+40     	; 0xde8 <enterPassword+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc0:	6f 81       	ldd	r22, Y+7	; 0x07
     dc2:	78 85       	ldd	r23, Y+8	; 0x08
     dc4:	89 85       	ldd	r24, Y+9	; 0x09
     dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9e 83       	std	Y+6, r25	; 0x06
     dd2:	8d 83       	std	Y+5, r24	; 0x05
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <enterPassword+0x210>
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_voidsendDATA('*');
	}

	_delay_ms(1000);
	LCD_voidsendcommand(0x01);
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>

	/* Read memory locations that hold the saved password */
	 EEPROM_ReadData(10,&passwordSaved [0]);
     dee:	9e 01       	movw	r18, r28
     df0:	2d 5d       	subi	r18, 0xDD	; 221
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	8a e0       	ldi	r24, 0x0A	; 10
     df6:	b9 01       	movw	r22, r18
     df8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <EEPROM_ReadData>
	 EEPROM_ReadData(11,&passwordSaved [1]);
     dfc:	ce 01       	movw	r24, r28
     dfe:	83 96       	adiw	r24, 0x23	; 35
     e00:	9c 01       	movw	r18, r24
     e02:	2f 5f       	subi	r18, 0xFF	; 255
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	8b e0       	ldi	r24, 0x0B	; 11
     e08:	b9 01       	movw	r22, r18
     e0a:	0e 94 79 14 	call	0x28f2	; 0x28f2 <EEPROM_ReadData>
	 EEPROM_ReadData(12,&passwordSaved [2]);
     e0e:	ce 01       	movw	r24, r28
     e10:	83 96       	adiw	r24, 0x23	; 35
     e12:	9c 01       	movw	r18, r24
     e14:	2e 5f       	subi	r18, 0xFE	; 254
     e16:	3f 4f       	sbci	r19, 0xFF	; 255
     e18:	8c e0       	ldi	r24, 0x0C	; 12
     e1a:	b9 01       	movw	r22, r18
     e1c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <EEPROM_ReadData>
	 EEPROM_ReadData(13,&passwordSaved [3]);
     e20:	ce 01       	movw	r24, r28
     e22:	83 96       	adiw	r24, 0x23	; 35
     e24:	9c 01       	movw	r18, r24
     e26:	2d 5f       	subi	r18, 0xFD	; 253
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	8d e0       	ldi	r24, 0x0D	; 13
     e2c:	b9 01       	movw	r22, r18
     e2e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <EEPROM_ReadData>

	/* Password entered is the same as the password saved before */
	if ((passwordSaved [0] == passwordEntered [0]) && (passwordSaved [1] == passwordEntered [1]) &&
     e32:	9b a1       	ldd	r25, Y+35	; 0x23
     e34:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e36:	98 17       	cp	r25, r24
     e38:	71 f4       	brne	.+28     	; 0xe56 <enterPassword+0x286>
     e3a:	9c a1       	ldd	r25, Y+36	; 0x24
     e3c:	88 a1       	ldd	r24, Y+32	; 0x20
     e3e:	98 17       	cp	r25, r24
     e40:	51 f4       	brne	.+20     	; 0xe56 <enterPassword+0x286>
     e42:	9d a1       	ldd	r25, Y+37	; 0x25
     e44:	89 a1       	ldd	r24, Y+33	; 0x21
     e46:	98 17       	cp	r25, r24
     e48:	31 f4       	brne	.+12     	; 0xe56 <enterPassword+0x286>
     e4a:	9e a1       	ldd	r25, Y+38	; 0x26
     e4c:	8a a1       	ldd	r24, Y+34	; 0x22
     e4e:	98 17       	cp	r25, r24
     e50:	11 f4       	brne	.+4      	; 0xe56 <enterPassword+0x286>
		(passwordSaved [2] == passwordEntered [2]) && (passwordSaved [3] == passwordEntered [3]))
	{
		/* There is NO error! */
		return 0;
     e52:	1f a2       	std	Y+39, r1	; 0x27
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <enterPassword+0x28a>
	}
	/* There IS error! */
	return 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	8f a3       	std	Y+39, r24	; 0x27
     e5a:	8f a1       	ldd	r24, Y+39	; 0x27
}
     e5c:	a7 96       	adiw	r28, 0x27	; 39
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <changePassword>:

void changePassword ()
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	a2 97       	sbiw	r28, 0x22	; 34
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
	u8 newPassword [4];

	/* Get the new 4 chars of the password from keypad */
	for(u8 t = 0; t < 4; t++)
     e82:	1e 8e       	std	Y+30, r1	; 0x1e
     e84:	8b c0       	rjmp	.+278    	; 0xf9c <changePassword+0x12e>
	{
		u8 key = '$';
     e86:	84 e2       	ldi	r24, 0x24	; 36
     e88:	8d 8f       	std	Y+29, r24	; 0x1d
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <changePassword+0x24>
		while (key == '$')	{key = keypad_u8GetPressedkey();}
     e8c:	0e 94 8b 13 	call	0x2716	; 0x2716 <keypad_u8GetPressedkey>
     e90:	8d 8f       	std	Y+29, r24	; 0x1d
     e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e94:	84 32       	cpi	r24, 0x24	; 36
     e96:	d1 f3       	breq	.-12     	; 0xe8c <changePassword+0x1e>
		newPassword[t] = key;
     e98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	ce 01       	movw	r24, r28
     ea0:	4f 96       	adiw	r24, 0x1f	; 31
     ea2:	fc 01       	movw	r30, r24
     ea4:	e2 0f       	add	r30, r18
     ea6:	f3 1f       	adc	r31, r19
     ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eaa:	80 83       	st	Z, r24
		LCD_voidsendDATA('*');
     eac:	8a e2       	ldi	r24, 0x2A	; 42
     eae:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a8 ec       	ldi	r26, 0xC8	; 200
     eb8:	b2 e4       	ldi	r27, 0x42	; 66
     eba:	89 8f       	std	Y+25, r24	; 0x19
     ebc:	9a 8f       	std	Y+26, r25	; 0x1a
     ebe:	ab 8f       	std	Y+27, r26	; 0x1b
     ec0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec2:	69 8d       	ldd	r22, Y+25	; 0x19
     ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	4a ef       	ldi	r20, 0xFA	; 250
     ed0:	54 e4       	ldi	r21, 0x44	; 68
     ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	8d 8b       	std	Y+21, r24	; 0x15
     edc:	9e 8b       	std	Y+22, r25	; 0x16
     ede:	af 8b       	std	Y+23, r26	; 0x17
     ee0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ee2:	6d 89       	ldd	r22, Y+21	; 0x15
     ee4:	7e 89       	ldd	r23, Y+22	; 0x16
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ef6:	88 23       	and	r24, r24
     ef8:	2c f4       	brge	.+10     	; 0xf04 <changePassword+0x96>
		__ticks = 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9c 8b       	std	Y+20, r25	; 0x14
     f00:	8b 8b       	std	Y+19, r24	; 0x13
     f02:	3f c0       	rjmp	.+126    	; 0xf82 <changePassword+0x114>
	else if (__tmp > 65535)
     f04:	6d 89       	ldd	r22, Y+21	; 0x15
     f06:	7e 89       	ldd	r23, Y+22	; 0x16
     f08:	8f 89       	ldd	r24, Y+23	; 0x17
     f0a:	98 8d       	ldd	r25, Y+24	; 0x18
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f18:	18 16       	cp	r1, r24
     f1a:	4c f5       	brge	.+82     	; 0xf6e <changePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1c:	69 8d       	ldd	r22, Y+25	; 0x19
     f1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	51 e4       	ldi	r21, 0x41	; 65
     f2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	9c 8b       	std	Y+20, r25	; 0x14
     f42:	8b 8b       	std	Y+19, r24	; 0x13
     f44:	0f c0       	rjmp	.+30     	; 0xf64 <changePassword+0xf6>
     f46:	88 ec       	ldi	r24, 0xC8	; 200
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9a 8b       	std	Y+18, r25	; 0x12
     f4c:	89 8b       	std	Y+17, r24	; 0x11
     f4e:	89 89       	ldd	r24, Y+17	; 0x11
     f50:	9a 89       	ldd	r25, Y+18	; 0x12
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <changePassword+0xe4>
     f56:	9a 8b       	std	Y+18, r25	; 0x12
     f58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5a:	8b 89       	ldd	r24, Y+19	; 0x13
     f5c:	9c 89       	ldd	r25, Y+20	; 0x14
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	9c 8b       	std	Y+20, r25	; 0x14
     f62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f64:	8b 89       	ldd	r24, Y+19	; 0x13
     f66:	9c 89       	ldd	r25, Y+20	; 0x14
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	69 f7       	brne	.-38     	; 0xf46 <changePassword+0xd8>
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <changePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6e:	6d 89       	ldd	r22, Y+21	; 0x15
     f70:	7e 89       	ldd	r23, Y+22	; 0x16
     f72:	8f 89       	ldd	r24, Y+23	; 0x17
     f74:	98 8d       	ldd	r25, Y+24	; 0x18
     f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9c 8b       	std	Y+20, r25	; 0x14
     f80:	8b 8b       	std	Y+19, r24	; 0x13
     f82:	8b 89       	ldd	r24, Y+19	; 0x13
     f84:	9c 89       	ldd	r25, Y+20	; 0x14
     f86:	98 8b       	std	Y+16, r25	; 0x10
     f88:	8f 87       	std	Y+15, r24	; 0x0f
     f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8c:	98 89       	ldd	r25, Y+16	; 0x10
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <changePassword+0x120>
     f92:	98 8b       	std	Y+16, r25	; 0x10
     f94:	8f 87       	std	Y+15, r24	; 0x0f
void changePassword ()
{
	u8 newPassword [4];

	/* Get the new 4 chars of the password from keypad */
	for(u8 t = 0; t < 4; t++)
     f96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	8e 8f       	std	Y+30, r24	; 0x1e
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <changePassword+0x136>
     fa2:	71 cf       	rjmp	.-286    	; 0xe86 <changePassword+0x18>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	aa e7       	ldi	r26, 0x7A	; 122
     faa:	b4 e4       	ldi	r27, 0x44	; 68
     fac:	8b 87       	std	Y+11, r24	; 0x0b
     fae:	9c 87       	std	Y+12, r25	; 0x0c
     fb0:	ad 87       	std	Y+13, r26	; 0x0d
     fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fba:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a ef       	ldi	r20, 0xFA	; 250
     fc2:	54 e4       	ldi	r21, 0x44	; 68
     fc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8f 83       	std	Y+7, r24	; 0x07
     fce:	98 87       	std	Y+8, r25	; 0x08
     fd0:	a9 87       	std	Y+9, r26	; 0x09
     fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fd4:	6f 81       	ldd	r22, Y+7	; 0x07
     fd6:	78 85       	ldd	r23, Y+8	; 0x08
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	9a 85       	ldd	r25, Y+10	; 0x0a
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fe8:	88 23       	and	r24, r24
     fea:	2c f4       	brge	.+10     	; 0xff6 <changePassword+0x188>
		__ticks = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <changePassword+0x206>
	else if (__tmp > 65535)
     ff6:	6f 81       	ldd	r22, Y+7	; 0x07
     ff8:	78 85       	ldd	r23, Y+8	; 0x08
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	3f ef       	ldi	r19, 0xFF	; 255
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	57 e4       	ldi	r21, 0x47	; 71
    1006:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    100a:	18 16       	cp	r1, r24
    100c:	4c f5       	brge	.+82     	; 0x1060 <changePassword+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1010:	7c 85       	ldd	r23, Y+12	; 0x0c
    1012:	8d 85       	ldd	r24, Y+13	; 0x0d
    1014:	9e 85       	ldd	r25, Y+14	; 0x0e
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <changePassword+0x1e8>
    1038:	88 ec       	ldi	r24, 0xC8	; 200
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9c 83       	std	Y+4, r25	; 0x04
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <changePassword+0x1d6>
    1048:	9c 83       	std	Y+4, r25	; 0x04
    104a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	69 f7       	brne	.-38     	; 0x1038 <changePassword+0x1ca>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <changePassword+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <changePassword+0x212>
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
		newPassword[t] = key;
		LCD_voidsendDATA('*');
		_delay_ms(100);
	}
	_delay_ms(1000);
	LCD_voidsendcommand(0x01);
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>

	/* Write new password to memory locations holding password */
	EEPROM_WriteData(10,newPassword[0]);
    108e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1090:	8a e0       	ldi	r24, 0x0A	; 10
    1092:	69 2f       	mov	r22, r25
    1094:	0e 94 5d 14 	call	0x28ba	; 0x28ba <EEPROM_WriteData>
	EEPROM_WriteData(11,newPassword[1]);
    1098:	98 a1       	ldd	r25, Y+32	; 0x20
    109a:	8b e0       	ldi	r24, 0x0B	; 11
    109c:	69 2f       	mov	r22, r25
    109e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <EEPROM_WriteData>
	EEPROM_WriteData(12,newPassword[2]);
    10a2:	99 a1       	ldd	r25, Y+33	; 0x21
    10a4:	8c e0       	ldi	r24, 0x0C	; 12
    10a6:	69 2f       	mov	r22, r25
    10a8:	0e 94 5d 14 	call	0x28ba	; 0x28ba <EEPROM_WriteData>
	EEPROM_WriteData(13,newPassword[3]);
    10ac:	9a a1       	ldd	r25, Y+34	; 0x22
    10ae:	8d e0       	ldi	r24, 0x0D	; 13
    10b0:	69 2f       	mov	r22, r25
    10b2:	0e 94 5d 14 	call	0x28ba	; 0x28ba <EEPROM_WriteData>
}
    10b6:	a2 96       	adiw	r28, 0x22	; 34
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <takeOpenLockerActions>:

u8 takeOpenLockerActions()
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	6e 97       	sbiw	r28, 0x1e	; 30
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
	/* Get key pressed on keypad to select action accordingly */
	u8 key = '$';
    10dc:	84 e2       	ldi	r24, 0x24	; 36
    10de:	8d 8f       	std	Y+29, r24	; 0x1d
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <takeOpenLockerActions+0x20>
	while (key == '$')	key =keypad_u8GetPressedkey();
    10e2:	0e 94 8b 13 	call	0x2716	; 0x2716 <keypad_u8GetPressedkey>
    10e6:	8d 8f       	std	Y+29, r24	; 0x1d
    10e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ea:	84 32       	cpi	r24, 0x24	; 36
    10ec:	d1 f3       	breq	.-12     	; 0x10e2 <takeOpenLockerActions+0x1a>

	/* '*' Sign on keypad maps to "Change Password" */
	if (key == '*')
    10ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f0:	8a 32       	cpi	r24, 0x2A	; 42
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <takeOpenLockerActions+0x2e>
    10f4:	0b c1       	rjmp	.+534    	; 0x130c <takeOpenLockerActions+0x244>
	{
		Buzzer_3_sec();
    10f6:	0e 94 a7 14 	call	0x294e	; 0x294e <Buzzer_3_sec>
		changePassword();
    10fa:	0e 94 37 07 	call	0xe6e	; 0xe6e <changePassword>
		LCD_voidsendstring("to confirm pwd *");
    10fe:	80 e6       	ldi	r24, 0x60	; 96
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	aa e7       	ldi	r26, 0x7A	; 122
    110c:	b4 e4       	ldi	r27, 0x44	; 68
    110e:	89 8f       	std	Y+25, r24	; 0x19
    1110:	9a 8f       	std	Y+26, r25	; 0x1a
    1112:	ab 8f       	std	Y+27, r26	; 0x1b
    1114:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	69 8d       	ldd	r22, Y+25	; 0x19
    1118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    111a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    111c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8d 8b       	std	Y+21, r24	; 0x15
    1130:	9e 8b       	std	Y+22, r25	; 0x16
    1132:	af 8b       	std	Y+23, r26	; 0x17
    1134:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1136:	6d 89       	ldd	r22, Y+21	; 0x15
    1138:	7e 89       	ldd	r23, Y+22	; 0x16
    113a:	8f 89       	ldd	r24, Y+23	; 0x17
    113c:	98 8d       	ldd	r25, Y+24	; 0x18
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <takeOpenLockerActions+0x90>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9c 8b       	std	Y+20, r25	; 0x14
    1154:	8b 8b       	std	Y+19, r24	; 0x13
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <takeOpenLockerActions+0x10e>
	else if (__tmp > 65535)
    1158:	6d 89       	ldd	r22, Y+21	; 0x15
    115a:	7e 89       	ldd	r23, Y+22	; 0x16
    115c:	8f 89       	ldd	r24, Y+23	; 0x17
    115e:	98 8d       	ldd	r25, Y+24	; 0x18
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <takeOpenLockerActions+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	69 8d       	ldd	r22, Y+25	; 0x19
    1172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <takeOpenLockerActions+0xf0>
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9a 8b       	std	Y+18, r25	; 0x12
    11a0:	89 8b       	std	Y+17, r24	; 0x11
    11a2:	89 89       	ldd	r24, Y+17	; 0x11
    11a4:	9a 89       	ldd	r25, Y+18	; 0x12
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <takeOpenLockerActions+0xde>
    11aa:	9a 8b       	std	Y+18, r25	; 0x12
    11ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8b 89       	ldd	r24, Y+19	; 0x13
    11b0:	9c 89       	ldd	r25, Y+20	; 0x14
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9c 8b       	std	Y+20, r25	; 0x14
    11b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ba:	9c 89       	ldd	r25, Y+20	; 0x14
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <takeOpenLockerActions+0xd2>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <takeOpenLockerActions+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6d 89       	ldd	r22, Y+21	; 0x15
    11c4:	7e 89       	ldd	r23, Y+22	; 0x16
    11c6:	8f 89       	ldd	r24, Y+23	; 0x17
    11c8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	8b 89       	ldd	r24, Y+19	; 0x13
    11d8:	9c 89       	ldd	r25, Y+20	; 0x14
    11da:	98 8b       	std	Y+16, r25	; 0x10
    11dc:	8f 87       	std	Y+15, r24	; 0x0f
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	98 89       	ldd	r25, Y+16	; 0x10
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <takeOpenLockerActions+0x11a>
    11e6:	98 8b       	std	Y+16, r25	; 0x10
    11e8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
			LCD_voidsendcommand(0x01);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
		key = '$';
    11f0:	84 e2       	ldi	r24, 0x24	; 36
    11f2:	8d 8f       	std	Y+29, r24	; 0x1d
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <takeOpenLockerActions+0x134>
		/* Press '*' again to confirm inserting password */
		while (key != '*')	key = keypad_u8GetPressedkey();
    11f6:	0e 94 8b 13 	call	0x2716	; 0x2716 <keypad_u8GetPressedkey>
    11fa:	8d 8f       	std	Y+29, r24	; 0x1d
    11fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11fe:	8a 32       	cpi	r24, 0x2A	; 42
    1200:	d1 f7       	brne	.-12     	; 0x11f6 <takeOpenLockerActions+0x12e>

		key = '$';
    1202:	84 e2       	ldi	r24, 0x24	; 36
    1204:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_voidsendstring("to close door D ");
    1206:	81 e7       	ldi	r24, 0x71	; 113
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	aa e7       	ldi	r26, 0x7A	; 122
    1214:	b4 e4       	ldi	r27, 0x44	; 68
    1216:	8b 87       	std	Y+11, r24	; 0x0b
    1218:	9c 87       	std	Y+12, r25	; 0x0c
    121a:	ad 87       	std	Y+13, r26	; 0x0d
    121c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1220:	7c 85       	ldd	r23, Y+12	; 0x0c
    1222:	8d 85       	ldd	r24, Y+13	; 0x0d
    1224:	9e 85       	ldd	r25, Y+14	; 0x0e
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a ef       	ldi	r20, 0xFA	; 250
    122c:	54 e4       	ldi	r21, 0x44	; 68
    122e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	8f 83       	std	Y+7, r24	; 0x07
    1238:	98 87       	std	Y+8, r25	; 0x08
    123a:	a9 87       	std	Y+9, r26	; 0x09
    123c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123e:	6f 81       	ldd	r22, Y+7	; 0x07
    1240:	78 85       	ldd	r23, Y+8	; 0x08
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <takeOpenLockerActions+0x198>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	3f c0       	rjmp	.+126    	; 0x12de <takeOpenLockerActions+0x216>
	else if (__tmp > 65535)
    1260:	6f 81       	ldd	r22, Y+7	; 0x07
    1262:	78 85       	ldd	r23, Y+8	; 0x08
    1264:	89 85       	ldd	r24, Y+9	; 0x09
    1266:	9a 85       	ldd	r25, Y+10	; 0x0a
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <takeOpenLockerActions+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	6b 85       	ldd	r22, Y+11	; 0x0b
    127a:	7c 85       	ldd	r23, Y+12	; 0x0c
    127c:	8d 85       	ldd	r24, Y+13	; 0x0d
    127e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9e 83       	std	Y+6, r25	; 0x06
    129e:	8d 83       	std	Y+5, r24	; 0x05
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <takeOpenLockerActions+0x1f8>
    12a2:	88 ec       	ldi	r24, 0xC8	; 200
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <takeOpenLockerActions+0x1e6>
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9e 83       	std	Y+6, r25	; 0x06
    12be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <takeOpenLockerActions+0x1da>
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <takeOpenLockerActions+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9e 83       	std	Y+6, r25	; 0x06
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <takeOpenLockerActions+0x222>
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
			LCD_voidsendcommand(0x01);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <takeOpenLockerActions+0x238>
		/* Press 'D' to close locker */
		while (key !='D')	key = keypad_u8GetPressedkey();
    12fa:	0e 94 8b 13 	call	0x2716	; 0x2716 <keypad_u8GetPressedkey>
    12fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1302:	84 34       	cpi	r24, 0x44	; 68
    1304:	d1 f7       	brne	.-12     	; 0x12fa <takeOpenLockerActions+0x232>
		/* Locker is now closed */
		return 1;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	8e 8f       	std	Y+30, r24	; 0x1e
    130a:	09 c0       	rjmp	.+18     	; 0x131e <takeOpenLockerActions+0x256>

	/* Any other key pressed, activates the buzzer */
	else
	{

		{ if (key == 'D')	/* Locker is now closed */
    130c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    130e:	84 34       	cpi	r24, 0x44	; 68
    1310:	19 f4       	brne	.+6      	; 0x1318 <takeOpenLockerActions+0x250>
				return 1;}
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	8e 8f       	std	Y+30, r24	; 0x1e
    1316:	03 c0       	rjmp	.+6      	; 0x131e <takeOpenLockerActions+0x256>
		Buzzer_100_ms();
    1318:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <Buzzer_100_ms>
		/* Locker is now open */
		return 0;
    131c:	1e 8e       	std	Y+30, r1	; 0x1e
    131e:	8e 8d       	ldd	r24, Y+30	; 0x1e
	}
}
    1320:	6e 96       	adiw	r28, 0x1e	; 30
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <TWI_voidMasterINST>:
#include "../../library/STD_types.h"
#include"IIC_register.h"
#include"IIC_private.h"
#include"IIC_interface.h"

void TWI_voidMasterINST(u8 copy_u8Slaveaddress){
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
	/*Set the clock frequency at 400 Kbps*/
	/*from the equation in page 173 in data sheet ,assume TWPS by 0 and get TWBR value
	 * 250 kbps*/
	TWBR=2;
    133e:	e0 e2       	ldi	r30, 0x20	; 32
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	80 83       	st	Z, r24
	CLR_BIT(TWSR,TWSR_TWPS0);
    1346:	a1 e2       	ldi	r26, 0x21	; 33
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e1 e2       	ldi	r30, 0x21	; 33
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8e 7f       	andi	r24, 0xFE	; 254
    1352:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    1354:	a1 e2       	ldi	r26, 0x21	; 33
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e1 e2       	ldi	r30, 0x21	; 33
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8d 7f       	andi	r24, 0xFD	; 253
    1360:	8c 93       	st	X, r24

	/*if the master addressed*/
	if(copy_u8Slaveaddress !=0)
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	88 23       	and	r24, r24
    1366:	21 f0       	breq	.+8      	; 0x1370 <TWI_voidMasterINST+0x3e>
	{
		TWAR=copy_u8Slaveaddress;
    1368:	e2 e2       	ldi	r30, 0x22	; 34
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	80 83       	st	Z, r24
	}
	/*TWI enable*/
	SET_BIT(TWCR,TWCR_TWEN);
    1370:	a6 e5       	ldi	r26, 0x56	; 86
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e6 e5       	ldi	r30, 0x56	; 86
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	84 60       	ori	r24, 0x04	; 4
    137c:	8c 93       	st	X, r24
}
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <TWI_voidSlaveINST>:
void TWI_voidSlaveINST(u8 copy_u8Slaveaddress){
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
/*set slave address*/
	TWAR=copy_u8Slaveaddress;
    1392:	e2 e2       	ldi	r30, 0x22	; 34
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	80 83       	st	Z, r24
	/*TWI enable*/
	SET_BIT(TWCR,TWCR_TWEN);
    139a:	a6 e5       	ldi	r26, 0x56	; 86
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e6 e5       	ldi	r30, 0x56	; 86
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	84 60       	ori	r24, 0x04	; 4
    13a6:	8c 93       	st	X, r24
}
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <TWI_SendStartcondition>:



TWI_errorstatus_t TWI_SendStartcondition(void){
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
TWI_errorstatus_t local_errorstatus=0;
    13ba:	19 82       	std	Y+1, r1	; 0x01
/*send start condition*/
SET_BIT(TWCR,TWCR_TWINT);
    13bc:	a6 e5       	ldi	r26, 0x56	; 86
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e6 e5       	ldi	r30, 0x56	; 86
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	80 68       	ori	r24, 0x80	; 128
    13c8:	8c 93       	st	X, r24
SET_BIT(TWCR,TWCR_TWSTA);
    13ca:	a6 e5       	ldi	r26, 0x56	; 86
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e6 e5       	ldi	r30, 0x56	; 86
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 62       	ori	r24, 0x20	; 32
    13d6:	8c 93       	st	X, r24
CLR_BIT(TWCR,TWCR_TWSTO);
    13d8:	a6 e5       	ldi	r26, 0x56	; 86
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e6 e5       	ldi	r30, 0x56	; 86
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8f 7e       	andi	r24, 0xEF	; 239
    13e4:	8c 93       	st	X, r24
SET_BIT(TWCR,TWCR_TWEN);
    13e6:	a6 e5       	ldi	r26, 0x56	; 86
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e6 e5       	ldi	r30, 0x56	; 86
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	8c 93       	st	X, r24

while (GET_BIT(TWCR ,TWCR_TWINT)==0)
    13f4:	e6 e5       	ldi	r30, 0x56	; 86
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	88 23       	and	r24, r24
    13fc:	dc f7       	brge	.-10     	; 0x13f4 <TWI_SendStartcondition+0x44>
;


if ((TWSR & 0xF8) !=START_ACK )
    13fe:	e1 e2       	ldi	r30, 0x21	; 33
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	88 7f       	andi	r24, 0xF8	; 248
    140a:	90 70       	andi	r25, 0x00	; 0
    140c:	88 30       	cpi	r24, 0x08	; 8
    140e:	91 05       	cpc	r25, r1
    1410:	29 f0       	breq	.+10     	; 0x141c <TWI_SendStartcondition+0x6c>
	local_errorstatus=(TWSR & 0xF8) ;
    1412:	e1 e2       	ldi	r30, 0x21	; 33
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	88 7f       	andi	r24, 0xF8	; 248
    141a:	89 83       	std	Y+1, r24	; 0x01

return local_errorstatus;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <TWI_SendRepeatedStart>:
TWI_errorstatus_t TWI_SendRepeatedStart(void){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	0f 92       	push	r0
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	TWI_errorstatus_t local_errorstatus=0;
    1430:	19 82       	std	Y+1, r1	; 0x01
	/*send start condition*/
	//CLR_BIT(TWCR,TWCR_TWSTA);
	//CLR_BIT(TWCR,TWCR_TWINT);
	SET_BIT(TWCR,TWCR_TWSTA);
    1432:	a6 e5       	ldi	r26, 0x56	; 86
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e6 e5       	ldi	r30, 0x56	; 86
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 62       	ori	r24, 0x20	; 32
    143e:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWINT);
    1440:	a6 e5       	ldi	r26, 0x56	; 86
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e6 e5       	ldi	r30, 0x56	; 86
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	8c 93       	st	X, r24

	CLR_BIT(TWCR,TWCR_TWSTO);
    144e:	a6 e5       	ldi	r26, 0x56	; 86
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e6 e5       	ldi	r30, 0x56	; 86
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 7e       	andi	r24, 0xEF	; 239
    145a:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEN);
    145c:	a6 e5       	ldi	r26, 0x56	; 86
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e6 e5       	ldi	r30, 0x56	; 86
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	84 60       	ori	r24, 0x04	; 4
    1468:	8c 93       	st	X, r24

	while (GET_BIT(TWCR ,TWCR_TWINT)==0)
    146a:	e6 e5       	ldi	r30, 0x56	; 86
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	88 23       	and	r24, r24
    1472:	dc f7       	brge	.-10     	; 0x146a <TWI_SendRepeatedStart+0x44>
	;


	//if ((TWSR & 0xF8) !=REP_START_ACK )
	//	local_errorstatus=(TWSR & 0xF8) ;
	return local_errorstatus;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
}
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <TWI_SendSlaveAddressWithWrite>:

TWI_errorstatus_t TWI_SendSlaveAddressWithWrite(u8 copy_u8SlaveAddress){
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <TWI_SendSlaveAddressWithWrite+0x6>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8a 83       	std	Y+2, r24	; 0x02
	TWI_errorstatus_t local_errorstatus=0;
    148a:	19 82       	std	Y+1, r1	; 0x01
	/*set the slave address*/
	TWDR=(copy_u8SlaveAddress)&(0b11111110);
    148c:	e3 e2       	ldi	r30, 0x23	; 35
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	8e 7f       	andi	r24, 0xFE	; 254
    1494:	80 83       	st	Z, r24
	/* send address*/
	SET_BIT(TWCR,TWCR_TWINT);
    1496:	a6 e5       	ldi	r26, 0x56	; 86
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e6 e5       	ldi	r30, 0x56	; 86
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	80 68       	ori	r24, 0x80	; 128
    14a2:	8c 93       	st	X, r24
	CLR_BIT(TWCR,TWCR_TWSTA);
    14a4:	a6 e5       	ldi	r26, 0x56	; 86
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e6 e5       	ldi	r30, 0x56	; 86
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 7d       	andi	r24, 0xDF	; 223
    14b0:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEN);
    14b2:	a6 e5       	ldi	r26, 0x56	; 86
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e6 e5       	ldi	r30, 0x56	; 86
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	84 60       	ori	r24, 0x04	; 4
    14be:	8c 93       	st	X, r24

	while (GET_BIT(TWCR ,TWCR_TWINT)==0)
    14c0:	e6 e5       	ldi	r30, 0x56	; 86
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	88 23       	and	r24, r24
    14c8:	dc f7       	brge	.-10     	; 0x14c0 <TWI_SendSlaveAddressWithWrite+0x42>
	;


	if ((TWSR & 0xF8) !=SLAVE_ADD_AND_WR_ACK )
    14ca:	e1 e2       	ldi	r30, 0x21	; 33
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	88 7f       	andi	r24, 0xF8	; 248
    14d6:	90 70       	andi	r25, 0x00	; 0
    14d8:	88 31       	cpi	r24, 0x18	; 24
    14da:	91 05       	cpc	r25, r1
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <TWI_SendSlaveAddressWithWrite+0x6a>
		local_errorstatus=(TWSR & 0xF8) ;
    14de:	e1 e2       	ldi	r30, 0x21	; 33
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	88 7f       	andi	r24, 0xF8	; 248
    14e6:	89 83       	std	Y+1, r24	; 0x01
	return local_errorstatus;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <TWI_SendSlaveAddressWithRead>:
TWI_errorstatus_t TWI_SendSlaveAddressWithRead(u8 copy_u8SlaveAddress){
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <TWI_SendSlaveAddressWithRead+0x6>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	8a 83       	std	Y+2, r24	; 0x02
	TWI_errorstatus_t local_errorstatus=0;
    1500:	19 82       	std	Y+1, r1	; 0x01
		/*set the slave address*/
		TWDR=(copy_u8SlaveAddress<<1)&(0b111111111);
    1502:	e3 e2       	ldi	r30, 0x23	; 35
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	80 83       	st	Z, r24
		/* send address*/
		SET_BIT(TWCR,TWCR_TWINT);
    1512:	a6 e5       	ldi	r26, 0x56	; 86
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e6 e5       	ldi	r30, 0x56	; 86
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	8c 93       	st	X, r24
		CLR_BIT(TWCR,TWCR_TWSTA);
    1520:	a6 e5       	ldi	r26, 0x56	; 86
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e6 e5       	ldi	r30, 0x56	; 86
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 7d       	andi	r24, 0xDF	; 223
    152c:	8c 93       	st	X, r24
		SET_BIT(TWCR,TWCR_TWEN);
    152e:	a6 e5       	ldi	r26, 0x56	; 86
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e6 e5       	ldi	r30, 0x56	; 86
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	84 60       	ori	r24, 0x04	; 4
    153a:	8c 93       	st	X, r24

		while (GET_BIT(TWCR ,TWCR_TWINT)==0)
    153c:	e6 e5       	ldi	r30, 0x56	; 86
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	88 23       	and	r24, r24
    1544:	dc f7       	brge	.-10     	; 0x153c <TWI_SendSlaveAddressWithRead+0x48>
		;


		if ((TWSR & 0xF8) !=SLAVE_ADD_AND_RD_ACK )
    1546:	e1 e2       	ldi	r30, 0x21	; 33
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	88 7f       	andi	r24, 0xF8	; 248
    1552:	90 70       	andi	r25, 0x00	; 0
    1554:	80 34       	cpi	r24, 0x40	; 64
    1556:	91 05       	cpc	r25, r1
    1558:	29 f0       	breq	.+10     	; 0x1564 <TWI_SendSlaveAddressWithRead+0x70>
			local_errorstatus=(TWSR & 0xF8) ;
    155a:	e1 e2       	ldi	r30, 0x21	; 33
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	88 7f       	andi	r24, 0xF8	; 248
    1562:	89 83       	std	Y+1, r24	; 0x01
		return local_errorstatus;
    1564:	89 81       	ldd	r24, Y+1	; 0x01
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <TWI_MasterSendDataByte>:

TWI_errorstatus_t TWI_MasterSendDataByte(u8 copy_u8DataByte){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <TWI_MasterSendDataByte+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_errorstatus_t local_errorstatus=0;
    157c:	19 82       	std	Y+1, r1	; 0x01
			/*set the slave address*/
			TWDR=copy_u8DataByte;
    157e:	e3 e2       	ldi	r30, 0x23	; 35
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	80 83       	st	Z, r24
			/* send address*/
			SET_BIT(TWCR,TWCR_TWINT);
    1586:	a6 e5       	ldi	r26, 0x56	; 86
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e6 e5       	ldi	r30, 0x56	; 86
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24
			SET_BIT(TWCR,TWCR_TWEN);
    1594:	a6 e5       	ldi	r26, 0x56	; 86
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e6 e5       	ldi	r30, 0x56	; 86
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	84 60       	ori	r24, 0x04	; 4
    15a0:	8c 93       	st	X, r24

			while (GET_BIT(TWCR ,TWCR_TWINT)==0)
    15a2:	e6 e5       	ldi	r30, 0x56	; 86
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	88 23       	and	r24, r24
    15aa:	dc f7       	brge	.-10     	; 0x15a2 <TWI_MasterSendDataByte+0x32>
			;


			if ((TWSR & 0xF8) !=MSTR_WR_BYTE_ACK )
    15ac:	e1 e2       	ldi	r30, 0x21	; 33
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	88 7f       	andi	r24, 0xF8	; 248
    15b8:	90 70       	andi	r25, 0x00	; 0
    15ba:	88 32       	cpi	r24, 0x28	; 40
    15bc:	91 05       	cpc	r25, r1
    15be:	29 f0       	breq	.+10     	; 0x15ca <TWI_MasterSendDataByte+0x5a>
				local_errorstatus=(TWSR & 0xF8) ;
    15c0:	e1 e2       	ldi	r30, 0x21	; 33
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 7f       	andi	r24, 0xF8	; 248
    15c8:	89 83       	std	Y+1, r24	; 0x01
			return local_errorstatus;
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <TWI_MasterReceiveDataByte>:
TWI_errorstatus_t TWI_MasterReceiveDataByte(u8 *copy_u8DataByte)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <TWI_MasterReceiveDataByte+0x6>
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	9b 83       	std	Y+3, r25	; 0x03
    15e4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_errorstatus_t local_errorstatus=0;
    15e6:	19 82       	std	Y+1, r1	; 0x01
				/*set the slave address*/

				/* send address*/
				SET_BIT(TWCR,TWCR_TWINT);
    15e8:	a6 e5       	ldi	r26, 0x56	; 86
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e6 e5       	ldi	r30, 0x56	; 86
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	80 68       	ori	r24, 0x80	; 128
    15f4:	8c 93       	st	X, r24
				SET_BIT(TWCR,TWCR_TWEN);
    15f6:	a6 e5       	ldi	r26, 0x56	; 86
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e6 e5       	ldi	r30, 0x56	; 86
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	84 60       	ori	r24, 0x04	; 4
    1602:	8c 93       	st	X, r24

				while (GET_BIT(TWCR ,TWCR_TWINT)==0)
    1604:	e6 e5       	ldi	r30, 0x56	; 86
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	88 23       	and	r24, r24
    160c:	dc f7       	brge	.-10     	; 0x1604 <TWI_MasterReceiveDataByte+0x2e>
				;

				*copy_u8DataByte=TWDR;
    160e:	e3 e2       	ldi	r30, 0x23	; 35
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	ea 81       	ldd	r30, Y+2	; 0x02
    1616:	fb 81       	ldd	r31, Y+3	; 0x03
    1618:	80 83       	st	Z, r24
				if ((TWSR & 0xF8) !=MSTR_RD_BYTE_WITH_ACK )
    161a:	e1 e2       	ldi	r30, 0x21	; 33
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	88 7f       	andi	r24, 0xF8	; 248
    1626:	90 70       	andi	r25, 0x00	; 0
    1628:	80 35       	cpi	r24, 0x50	; 80
    162a:	91 05       	cpc	r25, r1
    162c:	29 f0       	breq	.+10     	; 0x1638 <TWI_MasterReceiveDataByte+0x62>
					local_errorstatus=(TWSR & 0xF8) ;
    162e:	e1 e2       	ldi	r30, 0x21	; 33
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	88 7f       	andi	r24, 0xF8	; 248
    1636:	89 83       	std	Y+1, r24	; 0x01

				return local_errorstatus;}
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <IIC_voidSendStopcondition>:
void IIC_voidSendStopcondition(void){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWCR_TWINT);
    164e:	a6 e5       	ldi	r26, 0x56	; 86
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e6 e5       	ldi	r30, 0x56	; 86
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 68       	ori	r24, 0x80	; 128
    165a:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWSTO);
    165c:	a6 e5       	ldi	r26, 0x56	; 86
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e6 e5       	ldi	r30, 0x56	; 86
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 61       	ori	r24, 0x10	; 16
    1668:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEN);
    166a:	a6 e5       	ldi	r26, 0x56	; 86
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e6 e5       	ldi	r30, 0x56	; 86
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	84 60       	ori	r24, 0x04	; 4
    1676:	8c 93       	st	X, r24
	CLR_BIT(TWCR,TWCR_TWSTA);
    1678:	a6 e5       	ldi	r26, 0x56	; 86
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e6 e5       	ldi	r30, 0x56	; 86
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	8c 93       	st	X, r24
}
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <DIO_voidsetportdirection>:




void DIO_voidsetportdirection(u8 copy_u8port,u8  copy_u8portdirection)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <DIO_voidsetportdirection+0x6>
    1692:	00 d0       	rcall	.+0      	; 0x1694 <DIO_voidsetportdirection+0x8>
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3c 83       	std	Y+4, r19	; 0x04
    16a4:	2b 83       	std	Y+3, r18	; 0x03
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	91 05       	cpc	r25, r1
    16ae:	d1 f0       	breq	.+52     	; 0x16e4 <DIO_voidsetportdirection+0x58>
    16b0:	2b 81       	ldd	r18, Y+3	; 0x03
    16b2:	3c 81       	ldd	r19, Y+4	; 0x04
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <DIO_voidsetportdirection+0x38>
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	61 f0       	breq	.+24     	; 0x16da <DIO_voidsetportdirection+0x4e>
    16c2:	1e c0       	rjmp	.+60     	; 0x1700 <DIO_voidsetportdirection+0x74>
    16c4:	2b 81       	ldd	r18, Y+3	; 0x03
    16c6:	3c 81       	ldd	r19, Y+4	; 0x04
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	81 f0       	breq	.+32     	; 0x16ee <DIO_voidsetportdirection+0x62>
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	81 f0       	breq	.+32     	; 0x16f8 <DIO_voidsetportdirection+0x6c>
    16d8:	13 c0       	rjmp	.+38     	; 0x1700 <DIO_voidsetportdirection+0x74>
	{
	case DIO_u8PORTA: DDRA = copy_u8portdirection;break;
    16da:	ea e3       	ldi	r30, 0x3A	; 58
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	80 83       	st	Z, r24
    16e2:	0e c0       	rjmp	.+28     	; 0x1700 <DIO_voidsetportdirection+0x74>
	case DIO_u8PORTB: DDRB =copy_u8portdirection;break;
    16e4:	e7 e3       	ldi	r30, 0x37	; 55
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	80 83       	st	Z, r24
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <DIO_voidsetportdirection+0x74>
	case DIO_u8PORTC: DDRC = copy_u8portdirection;break;
    16ee:	e4 e3       	ldi	r30, 0x34	; 52
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	80 83       	st	Z, r24
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <DIO_voidsetportdirection+0x74>
	case DIO_u8PORTD: DDRD = copy_u8portdirection;break;
    16f8:	e1 e3       	ldi	r30, 0x31	; 49
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	80 83       	st	Z, r24
	default:  break;
	}
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <DIO_voidsetpindirection>:
void DIO_voidsetpindirection(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8direction)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	27 97       	sbiw	r28, 0x07	; 7
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	6a 83       	std	Y+2, r22	; 0x02
    1726:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pin <= DIO_u8PIN7)
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	88 30       	cpi	r24, 0x08	; 8
    172c:	08 f0       	brcs	.+2      	; 0x1730 <DIO_voidsetpindirection+0x22>
    172e:	ea c0       	rjmp	.+468    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
	{
		if(copy_u8direction==DIO_u8PIN_INPUT)
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 23       	and	r24, r24
    1734:	09 f0       	breq	.+2      	; 0x1738 <DIO_voidsetpindirection+0x2a>
    1736:	74 c0       	rjmp	.+232    	; 0x1820 <DIO_voidsetpindirection+0x112>
		{
			switch(copy_u8port)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3f 83       	std	Y+7, r19	; 0x07
    1740:	2e 83       	std	Y+6, r18	; 0x06
    1742:	8e 81       	ldd	r24, Y+6	; 0x06
    1744:	9f 81       	ldd	r25, Y+7	; 0x07
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	59 f1       	breq	.+86     	; 0x17a2 <DIO_voidsetpindirection+0x94>
    174c:	2e 81       	ldd	r18, Y+6	; 0x06
    174e:	3f 81       	ldd	r19, Y+7	; 0x07
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	2c f4       	brge	.+10     	; 0x1760 <DIO_voidsetpindirection+0x52>
    1756:	8e 81       	ldd	r24, Y+6	; 0x06
    1758:	9f 81       	ldd	r25, Y+7	; 0x07
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f0       	breq	.+26     	; 0x1778 <DIO_voidsetpindirection+0x6a>
    175e:	d2 c0       	rjmp	.+420    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
    1760:	2e 81       	ldd	r18, Y+6	; 0x06
    1762:	3f 81       	ldd	r19, Y+7	; 0x07
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	89 f1       	breq	.+98     	; 0x17cc <DIO_voidsetpindirection+0xbe>
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	9f 81       	ldd	r25, Y+7	; 0x07
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	91 05       	cpc	r25, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <DIO_voidsetpindirection+0x68>
    1774:	40 c0       	rjmp	.+128    	; 0x17f6 <DIO_voidsetpindirection+0xe8>
    1776:	c6 c0       	rjmp	.+396    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA, copy_u8pin);break;
    1778:	aa e3       	ldi	r26, 0x3A	; 58
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	ea e3       	ldi	r30, 0x3A	; 58
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_voidsetpindirection+0x88>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_voidsetpindirection+0x84>
    179a:	80 95       	com	r24
    179c:	84 23       	and	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	b1 c0       	rjmp	.+354    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			case DIO_u8PORTB: CLR_BIT(DDRB, copy_u8pin);break;
    17a2:	a7 e3       	ldi	r26, 0x37	; 55
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e7 e3       	ldi	r30, 0x37	; 55
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_voidsetpindirection+0xb2>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_voidsetpindirection+0xae>
    17c4:	80 95       	com	r24
    17c6:	84 23       	and	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	9c c0       	rjmp	.+312    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			case DIO_u8PORTC: CLR_BIT(DDRC, copy_u8pin);break;
    17cc:	a4 e3       	ldi	r26, 0x34	; 52
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e4 e3       	ldi	r30, 0x34	; 52
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_voidsetpindirection+0xdc>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_voidsetpindirection+0xd8>
    17ee:	80 95       	com	r24
    17f0:	84 23       	and	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	87 c0       	rjmp	.+270    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			case DIO_u8PORTD: CLR_BIT(DDRD, copy_u8pin);break;
    17f6:	a1 e3       	ldi	r26, 0x31	; 49
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e3       	ldi	r30, 0x31	; 49
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_voidsetpindirection+0x106>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <DIO_voidsetpindirection+0x102>
    1818:	80 95       	com	r24
    181a:	84 23       	and	r24, r20
    181c:	8c 93       	st	X, r24
    181e:	72 c0       	rjmp	.+228    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			default: break;
			}

		}
		else if(copy_u8direction==DIO_u8PIN_OUTPUT)
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	09 f0       	breq	.+2      	; 0x1828 <DIO_voidsetpindirection+0x11a>
    1826:	6e c0       	rjmp	.+220    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
		{
			switch(copy_u8port)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	3d 83       	std	Y+5, r19	; 0x05
    1830:	2c 83       	std	Y+4, r18	; 0x04
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	9d 81       	ldd	r25, Y+5	; 0x05
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	91 05       	cpc	r25, r1
    183a:	49 f1       	breq	.+82     	; 0x188e <DIO_voidsetpindirection+0x180>
    183c:	2c 81       	ldd	r18, Y+4	; 0x04
    183e:	3d 81       	ldd	r19, Y+5	; 0x05
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	2c f4       	brge	.+10     	; 0x1850 <DIO_voidsetpindirection+0x142>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	61 f0       	breq	.+24     	; 0x1866 <DIO_voidsetpindirection+0x158>
    184e:	5a c0       	rjmp	.+180    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	71 f1       	breq	.+92     	; 0x18b6 <DIO_voidsetpindirection+0x1a8>
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	91 05       	cpc	r25, r1
    1862:	e9 f1       	breq	.+122    	; 0x18de <DIO_voidsetpindirection+0x1d0>
    1864:	4f c0       	rjmp	.+158    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			{
			case DIO_u8PORTA: SET_BIT(DDRA, copy_u8pin);break;
    1866:	aa e3       	ldi	r26, 0x3A	; 58
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	ea e3       	ldi	r30, 0x3A	; 58
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_voidsetpindirection+0x176>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_voidsetpindirection+0x172>
    1888:	84 2b       	or	r24, r20
    188a:	8c 93       	st	X, r24
    188c:	3b c0       	rjmp	.+118    	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			case DIO_u8PORTB: SET_BIT(DDRB, copy_u8pin);break;
    188e:	a7 e3       	ldi	r26, 0x37	; 55
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e7 e3       	ldi	r30, 0x37	; 55
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_voidsetpindirection+0x19e>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <DIO_voidsetpindirection+0x19a>
    18b0:	84 2b       	or	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	27 c0       	rjmp	.+78     	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			case DIO_u8PORTC: SET_BIT(DDRC, copy_u8pin);break;
    18b6:	a4 e3       	ldi	r26, 0x34	; 52
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e4 e3       	ldi	r30, 0x34	; 52
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_voidsetpindirection+0x1c6>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_voidsetpindirection+0x1c2>
    18d8:	84 2b       	or	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	13 c0       	rjmp	.+38     	; 0x1904 <DIO_voidsetpindirection+0x1f6>
			case DIO_u8PORTD: SET_BIT(DDRD, copy_u8pin);break;
    18de:	a1 e3       	ldi	r26, 0x31	; 49
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e1 e3       	ldi	r30, 0x31	; 49
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_voidsetpindirection+0x1ee>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_voidsetpindirection+0x1ea>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
	else
	{
		/*u8 Local_Errorstate=1;*/

	}
}
    1904:	27 96       	adiw	r28, 0x07	; 7
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <DIO_voidsetportvalue>:
void DIO_voidsetportvalue(u8 copy_u8port,u8 copy_u8value)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <DIO_voidsetportvalue+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <DIO_voidsetportvalue+0x8>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	6a 83       	std	Y+2, r22	; 0x02
	/*u8 Local_Errorstate=0;*/
	switch(copy_u8port)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3c 83       	std	Y+4, r19	; 0x04
    192e:	2b 83       	std	Y+3, r18	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	d1 f0       	breq	.+52     	; 0x196e <DIO_voidsetportvalue+0x58>
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	3c 81       	ldd	r19, Y+4	; 0x04
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	2c f4       	brge	.+10     	; 0x194e <DIO_voidsetportvalue+0x38>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	61 f0       	breq	.+24     	; 0x1964 <DIO_voidsetportvalue+0x4e>
    194c:	1e c0       	rjmp	.+60     	; 0x198a <DIO_voidsetportvalue+0x74>
    194e:	2b 81       	ldd	r18, Y+3	; 0x03
    1950:	3c 81       	ldd	r19, Y+4	; 0x04
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	81 f0       	breq	.+32     	; 0x1978 <DIO_voidsetportvalue+0x62>
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	91 05       	cpc	r25, r1
    1960:	81 f0       	breq	.+32     	; 0x1982 <DIO_voidsetportvalue+0x6c>
    1962:	13 c0       	rjmp	.+38     	; 0x198a <DIO_voidsetportvalue+0x74>
	{
	case DIO_u8PORTA: PORTA= copy_u8value;break;
    1964:	eb e3       	ldi	r30, 0x3B	; 59
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 83       	st	Z, r24
    196c:	0e c0       	rjmp	.+28     	; 0x198a <DIO_voidsetportvalue+0x74>
	case DIO_u8PORTB: PORTB= copy_u8value;break;
    196e:	e8 e3       	ldi	r30, 0x38	; 56
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	80 83       	st	Z, r24
    1976:	09 c0       	rjmp	.+18     	; 0x198a <DIO_voidsetportvalue+0x74>
	case DIO_u8PORTC: PORTC= copy_u8value;break;
    1978:	e5 e3       	ldi	r30, 0x35	; 53
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	80 83       	st	Z, r24
    1980:	04 c0       	rjmp	.+8      	; 0x198a <DIO_voidsetportvalue+0x74>
	case DIO_u8PORTD: PORTD= copy_u8value;break;
    1982:	e2 e3       	ldi	r30, 0x32	; 50
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24
	default:  break; /*u8 Local_Errorstate=1;*/    //when using error checking
	}
/*u8 return Local_u8Errorstate;*/
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <DIO_voidsetpinvalue>:
void DIO_voidsetpinvalue(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8value)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	27 97       	sbiw	r28, 0x07	; 7
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	6a 83       	std	Y+2, r22	; 0x02
    19b0:	4b 83       	std	Y+3, r20	; 0x03
if(copy_u8pin <= DIO_u8PIN7)
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <DIO_voidsetpinvalue+0x22>
    19b8:	ea c0       	rjmp	.+468    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
{
	if(copy_u8value==DIO_u8PIN_LOW)
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	88 23       	and	r24, r24
    19be:	09 f0       	breq	.+2      	; 0x19c2 <DIO_voidsetpinvalue+0x2a>
    19c0:	74 c0       	rjmp	.+232    	; 0x1aaa <DIO_voidsetpinvalue+0x112>
	{
		switch(copy_u8port)
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3f 83       	std	Y+7, r19	; 0x07
    19ca:	2e 83       	std	Y+6, r18	; 0x06
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	91 05       	cpc	r25, r1
    19d4:	59 f1       	breq	.+86     	; 0x1a2c <DIO_voidsetpinvalue+0x94>
    19d6:	2e 81       	ldd	r18, Y+6	; 0x06
    19d8:	3f 81       	ldd	r19, Y+7	; 0x07
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	2c f4       	brge	.+10     	; 0x19ea <DIO_voidsetpinvalue+0x52>
    19e0:	8e 81       	ldd	r24, Y+6	; 0x06
    19e2:	9f 81       	ldd	r25, Y+7	; 0x07
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	69 f0       	breq	.+26     	; 0x1a02 <DIO_voidsetpinvalue+0x6a>
    19e8:	d2 c0       	rjmp	.+420    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
    19ea:	2e 81       	ldd	r18, Y+6	; 0x06
    19ec:	3f 81       	ldd	r19, Y+7	; 0x07
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	89 f1       	breq	.+98     	; 0x1a56 <DIO_voidsetpinvalue+0xbe>
    19f4:	8e 81       	ldd	r24, Y+6	; 0x06
    19f6:	9f 81       	ldd	r25, Y+7	; 0x07
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	91 05       	cpc	r25, r1
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <DIO_voidsetpinvalue+0x68>
    19fe:	40 c0       	rjmp	.+128    	; 0x1a80 <DIO_voidsetpinvalue+0xe8>
    1a00:	c6 c0       	rjmp	.+396    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		{
		case DIO_u8PORTA: CLR_BIT(PORTA, copy_u8pin);break;
    1a02:	ab e3       	ldi	r26, 0x3B	; 59
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	eb e3       	ldi	r30, 0x3B	; 59
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <DIO_voidsetpinvalue+0x88>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <DIO_voidsetpinvalue+0x84>
    1a24:	80 95       	com	r24
    1a26:	84 23       	and	r24, r20
    1a28:	8c 93       	st	X, r24
    1a2a:	b1 c0       	rjmp	.+354    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		case DIO_u8PORTB: CLR_BIT(PORTB, copy_u8pin);break;
    1a2c:	a8 e3       	ldi	r26, 0x38	; 56
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e8 e3       	ldi	r30, 0x38	; 56
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_voidsetpinvalue+0xb2>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_voidsetpinvalue+0xae>
    1a4e:	80 95       	com	r24
    1a50:	84 23       	and	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	9c c0       	rjmp	.+312    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		case DIO_u8PORTC: CLR_BIT(PORTC, copy_u8pin);break;
    1a56:	a5 e3       	ldi	r26, 0x35	; 53
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e5 e3       	ldi	r30, 0x35	; 53
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_voidsetpinvalue+0xdc>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_voidsetpinvalue+0xd8>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	87 c0       	rjmp	.+270    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		case DIO_u8PORTD: CLR_BIT(PORTD, copy_u8pin);break;
    1a80:	a2 e3       	ldi	r26, 0x32	; 50
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e2 e3       	ldi	r30, 0x32	; 50
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_voidsetpinvalue+0x106>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <DIO_voidsetpinvalue+0x102>
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	72 c0       	rjmp	.+228    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		default:  break;
		}
	}
	else if(copy_u8value==DIO_u8PIN_HIGH)
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <DIO_voidsetpinvalue+0x11a>
    1ab0:	6e c0       	rjmp	.+220    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
	{
		switch(copy_u8port)
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	3d 83       	std	Y+5, r19	; 0x05
    1aba:	2c 83       	std	Y+4, r18	; 0x04
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	49 f1       	breq	.+82     	; 0x1b18 <DIO_voidsetpinvalue+0x180>
    1ac6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aca:	22 30       	cpi	r18, 0x02	; 2
    1acc:	31 05       	cpc	r19, r1
    1ace:	2c f4       	brge	.+10     	; 0x1ada <DIO_voidsetpinvalue+0x142>
    1ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <DIO_voidsetpinvalue+0x158>
    1ad8:	5a c0       	rjmp	.+180    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
    1ada:	2c 81       	ldd	r18, Y+4	; 0x04
    1adc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	71 f1       	breq	.+92     	; 0x1b40 <DIO_voidsetpinvalue+0x1a8>
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	91 05       	cpc	r25, r1
    1aec:	e9 f1       	breq	.+122    	; 0x1b68 <DIO_voidsetpinvalue+0x1d0>
    1aee:	4f c0       	rjmp	.+158    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		{
		case DIO_u8PORTA: SET_BIT(PORTA, copy_u8pin);break;
    1af0:	ab e3       	ldi	r26, 0x3B	; 59
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	eb e3       	ldi	r30, 0x3B	; 59
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_voidsetpinvalue+0x176>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_voidsetpinvalue+0x172>
    1b12:	84 2b       	or	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	3b c0       	rjmp	.+118    	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		case DIO_u8PORTB: SET_BIT(PORTB, copy_u8pin);break;
    1b18:	a8 e3       	ldi	r26, 0x38	; 56
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e8 e3       	ldi	r30, 0x38	; 56
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_voidsetpinvalue+0x19e>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_voidsetpinvalue+0x19a>
    1b3a:	84 2b       	or	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	27 c0       	rjmp	.+78     	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		case DIO_u8PORTC: SET_BIT(PORTC, copy_u8pin);break;
    1b40:	a5 e3       	ldi	r26, 0x35	; 53
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e5 e3       	ldi	r30, 0x35	; 53
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <DIO_voidsetpinvalue+0x1c6>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <DIO_voidsetpinvalue+0x1c2>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	13 c0       	rjmp	.+38     	; 0x1b8e <DIO_voidsetpinvalue+0x1f6>
		case DIO_u8PORTD: SET_BIT(PORTD, copy_u8pin);break;
    1b68:	a2 e3       	ldi	r26, 0x32	; 50
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e2 e3       	ldi	r30, 0x32	; 50
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <DIO_voidsetpinvalue+0x1ee>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <DIO_voidsetpinvalue+0x1ea>
    1b8a:	84 2b       	or	r24, r20
    1b8c:	8c 93       	st	X, r24
else
{
	/*u8 Local_Errorstate=1;*/     //when using error checking
}
/*return Local_u8Errorstate;*/     //when using error checking
}
    1b8e:	27 96       	adiw	r28, 0x07	; 7
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <DIO_u8getpinvalue>:
u8 DIO_u8getpinvalue(u8 copy_u8port,u8 copy_u8pin)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <DIO_u8getpinvalue+0x6>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <DIO_u8getpinvalue+0x8>
    1ba8:	0f 92       	push	r0
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	8a 83       	std	Y+2, r24	; 0x02
    1bb0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8pinvalue= Null;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port)
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	3d 83       	std	Y+5, r19	; 0x05
    1bbc:	2c 83       	std	Y+4, r18	; 0x04
    1bbe:	4c 81       	ldd	r20, Y+4	; 0x04
    1bc0:	5d 81       	ldd	r21, Y+5	; 0x05
    1bc2:	41 30       	cpi	r20, 0x01	; 1
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	41 f1       	breq	.+80     	; 0x1c18 <DIO_u8getpinvalue+0x78>
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bca:	9d 81       	ldd	r25, Y+5	; 0x05
    1bcc:	82 30       	cpi	r24, 0x02	; 2
    1bce:	91 05       	cpc	r25, r1
    1bd0:	34 f4       	brge	.+12     	; 0x1bde <DIO_u8getpinvalue+0x3e>
    1bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd6:	21 15       	cp	r18, r1
    1bd8:	31 05       	cpc	r19, r1
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <DIO_u8getpinvalue+0x54>
    1bdc:	52 c0       	rjmp	.+164    	; 0x1c82 <DIO_u8getpinvalue+0xe2>
    1bde:	4c 81       	ldd	r20, Y+4	; 0x04
    1be0:	5d 81       	ldd	r21, Y+5	; 0x05
    1be2:	42 30       	cpi	r20, 0x02	; 2
    1be4:	51 05       	cpc	r21, r1
    1be6:	51 f1       	breq	.+84     	; 0x1c3c <DIO_u8getpinvalue+0x9c>
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	91 05       	cpc	r25, r1
    1bf0:	b9 f1       	breq	.+110    	; 0x1c60 <DIO_u8getpinvalue+0xc0>
    1bf2:	47 c0       	rjmp	.+142    	; 0x1c82 <DIO_u8getpinvalue+0xe2>
	{
	case DIO_u8PORTA: Local_u8pinvalue= GET_BIT(PINA, copy_u8pin);break;
    1bf4:	e9 e3       	ldi	r30, 0x39	; 57
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a9 01       	movw	r20, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_u8getpinvalue+0x6c>
    1c08:	55 95       	asr	r21
    1c0a:	47 95       	ror	r20
    1c0c:	8a 95       	dec	r24
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_u8getpinvalue+0x68>
    1c10:	ca 01       	movw	r24, r20
    1c12:	81 70       	andi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	35 c0       	rjmp	.+106    	; 0x1c82 <DIO_u8getpinvalue+0xe2>
	case DIO_u8PORTB: Local_u8pinvalue= GET_BIT(PINB, copy_u8pin);break;
    1c18:	e6 e3       	ldi	r30, 0x36	; 54
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a9 01       	movw	r20, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_u8getpinvalue+0x90>
    1c2c:	55 95       	asr	r21
    1c2e:	47 95       	ror	r20
    1c30:	8a 95       	dec	r24
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_u8getpinvalue+0x8c>
    1c34:	ca 01       	movw	r24, r20
    1c36:	81 70       	andi	r24, 0x01	; 1
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	23 c0       	rjmp	.+70     	; 0x1c82 <DIO_u8getpinvalue+0xe2>
	case DIO_u8PORTC: Local_u8pinvalue= GET_BIT(PINC, copy_u8pin);break;
    1c3c:	e3 e3       	ldi	r30, 0x33	; 51
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	88 2f       	mov	r24, r24
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a9 01       	movw	r20, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_u8getpinvalue+0xb4>
    1c50:	55 95       	asr	r21
    1c52:	47 95       	ror	r20
    1c54:	8a 95       	dec	r24
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_u8getpinvalue+0xb0>
    1c58:	ca 01       	movw	r24, r20
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	11 c0       	rjmp	.+34     	; 0x1c82 <DIO_u8getpinvalue+0xe2>
	case DIO_u8PORTD: Local_u8pinvalue= GET_BIT(PIND, copy_u8pin);break;
    1c60:	e0 e3       	ldi	r30, 0x30	; 48
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	88 2f       	mov	r24, r24
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a9 01       	movw	r20, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <DIO_u8getpinvalue+0xd8>
    1c74:	55 95       	asr	r21
    1c76:	47 95       	ror	r20
    1c78:	8a 95       	dec	r24
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <DIO_u8getpinvalue+0xd4>
    1c7c:	ca 01       	movw	r24, r20
    1c7e:	81 70       	andi	r24, 0x01	; 1
    1c80:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8pinvalue;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01


}
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <LCD_voidsendcommand>:
#include"LCD_private.h"

#include<util/delay.h>

	void LCD_voidsendcommand(u8 copy_u8command)
	{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	6d 97       	sbiw	r28, 0x1d	; 29
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	8d 8f       	std	Y+29, r24	; 0x1d
		/*set RS low to enable command*/
		DIO_voidsetpinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8PIN_LOW);
    1caa:	83 e0       	ldi	r24, 0x03	; 3
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
/*set RW low to enable write mode*/
	DIO_voidsetpinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8PIN_LOW);
    1cb4:	83 e0       	ldi	r24, 0x03	; 3
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
/*set DATA port to send command*/
	DIO_voidsetportvalue(LCD_DATA_PORT,copy_u8command);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cc2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_voidsetportvalue>
/*enable pulse*/


	DIO_voidsetpinvalue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8PIN_HIGH);
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e4       	ldi	r27, 0x40	; 64
    1cd8:	89 8f       	std	Y+25, r24	; 0x19
    1cda:	9a 8f       	std	Y+26, r25	; 0x1a
    1cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    1cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a ef       	ldi	r20, 0xFA	; 250
    1cee:	54 e4       	ldi	r21, 0x44	; 68
    1cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8d 8b       	std	Y+21, r24	; 0x15
    1cfa:	9e 8b       	std	Y+22, r25	; 0x16
    1cfc:	af 8b       	std	Y+23, r26	; 0x17
    1cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d00:	6d 89       	ldd	r22, Y+21	; 0x15
    1d02:	7e 89       	ldd	r23, Y+22	; 0x16
    1d04:	8f 89       	ldd	r24, Y+23	; 0x17
    1d06:	98 8d       	ldd	r25, Y+24	; 0x18
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <LCD_voidsendcommand+0x8e>
		__ticks = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9c 8b       	std	Y+20, r25	; 0x14
    1d1e:	8b 8b       	std	Y+19, r24	; 0x13
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <LCD_voidsendcommand+0x10c>
	else if (__tmp > 65535)
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	4c f5       	brge	.+82     	; 0x1d8c <LCD_voidsendcommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9c 8b       	std	Y+20, r25	; 0x14
    1d60:	8b 8b       	std	Y+19, r24	; 0x13
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_voidsendcommand+0xee>
    1d64:	88 ec       	ldi	r24, 0xC8	; 200
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9a 8b       	std	Y+18, r25	; 0x12
    1d6a:	89 8b       	std	Y+17, r24	; 0x11
    1d6c:	89 89       	ldd	r24, Y+17	; 0x11
    1d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_voidsendcommand+0xdc>
    1d74:	9a 8b       	std	Y+18, r25	; 0x12
    1d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	9c 8b       	std	Y+20, r25	; 0x14
    1d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	8b 89       	ldd	r24, Y+19	; 0x13
    1d84:	9c 89       	ldd	r25, Y+20	; 0x14
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <LCD_voidsendcommand+0xd0>
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <LCD_voidsendcommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d90:	8f 89       	ldd	r24, Y+23	; 0x17
    1d92:	98 8d       	ldd	r25, Y+24	; 0x18
    1d94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9c 8b       	std	Y+20, r25	; 0x14
    1d9e:	8b 8b       	std	Y+19, r24	; 0x13
    1da0:	8b 89       	ldd	r24, Y+19	; 0x13
    1da2:	9c 89       	ldd	r25, Y+20	; 0x14
    1da4:	98 8b       	std	Y+16, r25	; 0x10
    1da6:	8f 87       	std	Y+15, r24	; 0x0f
    1da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1daa:	98 89       	ldd	r25, Y+16	; 0x10
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_voidsendcommand+0x118>
    1db0:	98 8b       	std	Y+16, r25	; 0x10
    1db2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);
	DIO_voidsetpinvalue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8PIN_LOW);
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	62 e0       	ldi	r22, 0x02	; 2
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 e0       	ldi	r26, 0x00	; 0
    1dc4:	b0 e4       	ldi	r27, 0x40	; 64
    1dc6:	8b 87       	std	Y+11, r24	; 0x0b
    1dc8:	9c 87       	std	Y+12, r25	; 0x0c
    1dca:	ad 87       	std	Y+13, r26	; 0x0d
    1dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a ef       	ldi	r20, 0xFA	; 250
    1ddc:	54 e4       	ldi	r21, 0x44	; 68
    1dde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8f 83       	std	Y+7, r24	; 0x07
    1de8:	98 87       	std	Y+8, r25	; 0x08
    1dea:	a9 87       	std	Y+9, r26	; 0x09
    1dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <LCD_voidsendcommand+0x17c>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <LCD_voidsendcommand+0x1fa>
	else if (__tmp > 65535)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <LCD_voidsendcommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <LCD_voidsendcommand+0x1dc>
    1e52:	88 ec       	ldi	r24, 0xC8	; 200
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_voidsendcommand+0x1ca>
    1e62:	9c 83       	std	Y+4, r25	; 0x04
    1e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <LCD_voidsendcommand+0x1be>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <LCD_voidsendcommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_voidsendcommand+0x206>
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
    1ea2:	6d 96       	adiw	r28, 0x1d	; 29
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <LCD_voidsendDATA>:



	void LCD_voidsendDATA(u8 copy_u8DATA)
	{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	6d 97       	sbiw	r28, 0x1d	; 29
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	8d 8f       	std	Y+29, r24	; 0x1d
	//	/*set RS high to enable command*/
		DIO_voidsetpinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8PIN_HIGH);
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
		/*set RW low to enable write mode*/
		DIO_voidsetpinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8PIN_LOW);
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
	//	/*set data port to send DATA*/
		DIO_voidsetportvalue(LCD_DATA_PORT, copy_u8DATA);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ee2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_voidsetportvalue>
	//	/*enable pulse*/


		DIO_voidsetpinvalue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8PIN_HIGH);
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	62 e0       	ldi	r22, 0x02	; 2
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a0 e0       	ldi	r26, 0x00	; 0
    1ef6:	b0 e4       	ldi	r27, 0x40	; 64
    1ef8:	89 8f       	std	Y+25, r24	; 0x19
    1efa:	9a 8f       	std	Y+26, r25	; 0x1a
    1efc:	ab 8f       	std	Y+27, r26	; 0x1b
    1efe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	69 8d       	ldd	r22, Y+25	; 0x19
    1f02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a ef       	ldi	r20, 0xFA	; 250
    1f0e:	54 e4       	ldi	r21, 0x44	; 68
    1f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	8d 8b       	std	Y+21, r24	; 0x15
    1f1a:	9e 8b       	std	Y+22, r25	; 0x16
    1f1c:	af 8b       	std	Y+23, r26	; 0x17
    1f1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f20:	6d 89       	ldd	r22, Y+21	; 0x15
    1f22:	7e 89       	ldd	r23, Y+22	; 0x16
    1f24:	8f 89       	ldd	r24, Y+23	; 0x17
    1f26:	98 8d       	ldd	r25, Y+24	; 0x18
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <LCD_voidsendDATA+0x8e>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <LCD_voidsendDATA+0x10c>
	else if (__tmp > 65535)
    1f42:	6d 89       	ldd	r22, Y+21	; 0x15
    1f44:	7e 89       	ldd	r23, Y+22	; 0x16
    1f46:	8f 89       	ldd	r24, Y+23	; 0x17
    1f48:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <LCD_voidsendDATA+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9c 8b       	std	Y+20, r25	; 0x14
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <LCD_voidsendDATA+0xee>
    1f84:	88 ec       	ldi	r24, 0xC8	; 200
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9a 8b       	std	Y+18, r25	; 0x12
    1f8a:	89 8b       	std	Y+17, r24	; 0x11
    1f8c:	89 89       	ldd	r24, Y+17	; 0x11
    1f8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_voidsendDATA+0xdc>
    1f94:	9a 8b       	std	Y+18, r25	; 0x12
    1f96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <LCD_voidsendDATA+0xd0>
    1faa:	14 c0       	rjmp	.+40     	; 0x1fd4 <LCD_voidsendDATA+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	6d 89       	ldd	r22, Y+21	; 0x15
    1fae:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9c 8b       	std	Y+20, r25	; 0x14
    1fbe:	8b 8b       	std	Y+19, r24	; 0x13
    1fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc4:	98 8b       	std	Y+16, r25	; 0x10
    1fc6:	8f 87       	std	Y+15, r24	; 0x0f
    1fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fca:	98 89       	ldd	r25, Y+16	; 0x10
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_voidsendDATA+0x118>
    1fd0:	98 8b       	std	Y+16, r25	; 0x10
    1fd2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_voidsetpinvalue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8PIN_LOW);
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	62 e0       	ldi	r22, 0x02	; 2
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e0       	ldi	r26, 0x00	; 0
    1fe4:	b0 e4       	ldi	r27, 0x40	; 64
    1fe6:	8b 87       	std	Y+11, r24	; 0x0b
    1fe8:	9c 87       	std	Y+12, r25	; 0x0c
    1fea:	ad 87       	std	Y+13, r26	; 0x0d
    1fec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a ef       	ldi	r20, 0xFA	; 250
    1ffc:	54 e4       	ldi	r21, 0x44	; 68
    1ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8f 83       	std	Y+7, r24	; 0x07
    2008:	98 87       	std	Y+8, r25	; 0x08
    200a:	a9 87       	std	Y+9, r26	; 0x09
    200c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <LCD_voidsendDATA+0x17c>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <LCD_voidsendDATA+0x1fa>
	else if (__tmp > 65535)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <LCD_voidsendDATA+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	6b 85       	ldd	r22, Y+11	; 0x0b
    204a:	7c 85       	ldd	r23, Y+12	; 0x0c
    204c:	8d 85       	ldd	r24, Y+13	; 0x0d
    204e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <LCD_voidsendDATA+0x1dc>
    2072:	88 ec       	ldi	r24, 0xC8	; 200
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	8b 83       	std	Y+3, r24	; 0x03
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_voidsendDATA+0x1ca>
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <LCD_voidsendDATA+0x1be>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <LCD_voidsendDATA+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	6f 81       	ldd	r22, Y+7	; 0x07
    209c:	78 85       	ldd	r23, Y+8	; 0x08
    209e:	89 85       	ldd	r24, Y+9	; 0x09
    20a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_voidsendDATA+0x206>
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(2);


	}
    20c2:	6d 96       	adiw	r28, 0x1d	; 29
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <LCD_voidINST>:
	void LCD_voidINST(void)
	{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	6c 97       	sbiw	r28, 0x1c	; 28
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
		DIO_voidsetportdirection(LCD_CONTROL_PORT,DIO_u8PORT_OUTPUT);
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	6f ef       	ldi	r22, 0xFF	; 255
    20ec:	0e 94 46 0b 	call	0x168c	; 0x168c <DIO_voidsetportdirection>
		DIO_voidsetportdirection(LCD_DATA_PORT,DIO_u8PORT_OUTPUT);
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	6f ef       	ldi	r22, 0xFF	; 255
    20f4:	0e 94 46 0b 	call	0x168c	; 0x168c <DIO_voidsetportdirection>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	ac e0       	ldi	r26, 0x0C	; 12
    20fe:	b2 e4       	ldi	r27, 0x42	; 66
    2100:	89 8f       	std	Y+25, r24	; 0x19
    2102:	9a 8f       	std	Y+26, r25	; 0x1a
    2104:	ab 8f       	std	Y+27, r26	; 0x1b
    2106:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	69 8d       	ldd	r22, Y+25	; 0x19
    210a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8d 8b       	std	Y+21, r24	; 0x15
    2122:	9e 8b       	std	Y+22, r25	; 0x16
    2124:	af 8b       	std	Y+23, r26	; 0x17
    2126:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <LCD_voidINST+0x76>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 8b       	std	Y+20, r25	; 0x14
    2146:	8b 8b       	std	Y+19, r24	; 0x13
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <LCD_voidINST+0xf4>
	else if (__tmp > 65535)
    214a:	6d 89       	ldd	r22, Y+21	; 0x15
    214c:	7e 89       	ldd	r23, Y+22	; 0x16
    214e:	8f 89       	ldd	r24, Y+23	; 0x17
    2150:	98 8d       	ldd	r25, Y+24	; 0x18
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <LCD_voidINST+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	69 8d       	ldd	r22, Y+25	; 0x19
    2164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_voidINST+0xd6>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9a 8b       	std	Y+18, r25	; 0x12
    2192:	89 8b       	std	Y+17, r24	; 0x11
    2194:	89 89       	ldd	r24, Y+17	; 0x11
    2196:	9a 89       	ldd	r25, Y+18	; 0x12
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_voidINST+0xc4>
    219c:	9a 8b       	std	Y+18, r25	; 0x12
    219e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <LCD_voidINST+0xb8>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <LCD_voidINST+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6d 89       	ldd	r22, Y+21	; 0x15
    21b6:	7e 89       	ldd	r23, Y+22	; 0x16
    21b8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ba:	98 8d       	ldd	r25, Y+24	; 0x18
    21bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9c 8b       	std	Y+20, r25	; 0x14
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ca:	9c 89       	ldd	r25, Y+20	; 0x14
    21cc:	98 8b       	std	Y+16, r25	; 0x10
    21ce:	8f 87       	std	Y+15, r24	; 0x0f
    21d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d2:	98 89       	ldd	r25, Y+16	; 0x10
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_voidINST+0x100>
    21d8:	98 8b       	std	Y+16, r25	; 0x10
    21da:	8f 87       	std	Y+15, r24	; 0x0f
		/*wait more than 30us*/
		_delay_ms(35);
		/*Initialize LCD configuration to 2 lines, font size 5*8 */
		LCD_voidsendcommand(0b00111000);
    21dc:	88 e3       	ldi	r24, 0x38	; 56
    21de:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
		/* display ON/OFF control display enabled, cursor ON, blink enabled */
		LCD_voidsendcommand(0b00001111);
    21e2:	8f e0       	ldi	r24, 0x0F	; 15
    21e4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
		/*Clear display command */
		LCD_voidsendcommand(0b0000001);
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 e0       	ldi	r26, 0x00	; 0
    21f4:	b0 e4       	ldi	r27, 0x40	; 64
    21f6:	8b 87       	std	Y+11, r24	; 0x0b
    21f8:	9c 87       	std	Y+12, r25	; 0x0c
    21fa:	ad 87       	std	Y+13, r26	; 0x0d
    21fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2200:	7c 85       	ldd	r23, Y+12	; 0x0c
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a ef       	ldi	r20, 0xFA	; 250
    220c:	54 e4       	ldi	r21, 0x44	; 68
    220e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8f 83       	std	Y+7, r24	; 0x07
    2218:	98 87       	std	Y+8, r25	; 0x08
    221a:	a9 87       	std	Y+9, r26	; 0x09
    221c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	2c f4       	brge	.+10     	; 0x2240 <LCD_voidINST+0x16c>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	3f c0       	rjmp	.+126    	; 0x22be <LCD_voidINST+0x1ea>
	else if (__tmp > 65535)
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	4c f5       	brge	.+82     	; 0x22aa <LCD_voidINST+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	6b 85       	ldd	r22, Y+11	; 0x0b
    225a:	7c 85       	ldd	r23, Y+12	; 0x0c
    225c:	8d 85       	ldd	r24, Y+13	; 0x0d
    225e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <LCD_voidINST+0x1cc>
    2282:	88 ec       	ldi	r24, 0xC8	; 200
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_voidINST+0x1ba>
    2292:	9c 83       	std	Y+4, r25	; 0x04
    2294:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	69 f7       	brne	.-38     	; 0x2282 <LCD_voidINST+0x1ae>
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <LCD_voidINST+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	78 85       	ldd	r23, Y+8	; 0x08
    22ae:	89 85       	ldd	r24, Y+9	; 0x09
    22b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_voidINST+0x1f6>
    22ce:	9a 83       	std	Y+2, r25	; 0x02
    22d0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

	}
    22d2:	6c 96       	adiw	r28, 0x1c	; 28
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <LCD_voidsendstring>:



	void LCD_voidsendstring(char* copy_u8string)
	{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <LCD_voidsendstring+0x6>
    22ea:	0f 92       	push	r0
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9b 83       	std	Y+3, r25	; 0x03
    22f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8counter = 0;
    22f4:	19 82       	std	Y+1, r1	; 0x01
    22f6:	0e c0       	rjmp	.+28     	; 0x2314 <LCD_voidsendstring+0x30>
	while(copy_u8string[local_u8counter] !='\0')
	{
		LCD_voidsendDATA(copy_u8string[local_u8counter]);
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	fc 01       	movw	r30, r24
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	80 81       	ld	r24, Z
    230a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		local_u8counter++;
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	8f 5f       	subi	r24, 0xFF	; 255
    2312:	89 83       	std	Y+1, r24	; 0x01


	void LCD_voidsendstring(char* copy_u8string)
	{
	u8 local_u8counter = 0;
	while(copy_u8string[local_u8counter] !='\0')
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	fc 01       	movw	r30, r24
    2320:	e2 0f       	add	r30, r18
    2322:	f3 1f       	adc	r31, r19
    2324:	80 81       	ld	r24, Z
    2326:	88 23       	and	r24, r24
    2328:	39 f7       	brne	.-50     	; 0x22f8 <LCD_voidsendstring+0x14>
	{
		LCD_voidsendDATA(copy_u8string[local_u8counter]);
		local_u8counter++;
	}
	}
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 copy_u8Xpos,u8 copy_u8Ypos)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	00 d0       	rcall	.+0      	; 0x233c <LCD_voidGoToXY+0x6>
    233c:	0f 92       	push	r0
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8position;
	if(copy_u8Ypos==0)
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	88 23       	and	r24, r24
    234a:	19 f4       	brne	.+6      	; 0x2352 <LCD_voidGoToXY+0x1c>
	{
		local_u8position=copy_u8Xpos;
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	06 c0       	rjmp	.+12     	; 0x235e <LCD_voidGoToXY+0x28>

	}
	else if(copy_u8Ypos==1)
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	19 f4       	brne	.+6      	; 0x235e <LCD_voidGoToXY+0x28>
	{
		local_u8position=copy_u8Xpos+0x40;
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	80 5c       	subi	r24, 0xC0	; 192
    235c:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidsendcommand(local_u8position+128);
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	80 58       	subi	r24, 0x80	; 128
    2362:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <Log_voidPrintString>:
#include "LCD_interface.h"
#include "Log_interface.h"


void Log_voidPrintString(u8 Copy_u8ptr[])
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <Log_voidPrintString+0x6>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	0a c0       	rjmp	.+20     	; 0x2396 <Log_voidPrintString+0x24>

	while(*Copy_u8ptr != '\0')
	{
		 LCD_voidsendDATA(*Copy_u8ptr);
    2382:	e9 81       	ldd	r30, Y+1	; 0x01
    2384:	fa 81       	ldd	r31, Y+2	; 0x02
    2386:	80 81       	ld	r24, Z
    2388:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Copy_u8ptr++;
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	9a 83       	std	Y+2, r25	; 0x02
    2394:	89 83       	std	Y+1, r24	; 0x01


void Log_voidPrintString(u8 Copy_u8ptr[])
{

	while(*Copy_u8ptr != '\0')
    2396:	e9 81       	ldd	r30, Y+1	; 0x01
    2398:	fa 81       	ldd	r31, Y+2	; 0x02
    239a:	80 81       	ld	r24, Z
    239c:	88 23       	and	r24, r24
    239e:	89 f7       	brne	.-30     	; 0x2382 <Log_voidPrintString+0x10>
	{
		 LCD_voidsendDATA(*Copy_u8ptr);
		Copy_u8ptr++;
	}
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <Log_voidPrintNumber>:
/* Author    : Ahmed Assaf                                     */
/* Version   : V01                                             */
/***************************************************************/

void Log_voidPrintNumber(u16 Copy_u16Val)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <Log_voidPrintNumber+0x6>
    23b0:	0f 92       	push	r0
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	9b 83       	std	Y+3, r25	; 0x03
    23b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Factor;

	if (Copy_u16Val >= (u16)10000)
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	9b 81       	ldd	r25, Y+3	; 0x03
    23be:	27 e2       	ldi	r18, 0x27	; 39
    23c0:	80 31       	cpi	r24, 0x10	; 16
    23c2:	92 07       	cpc	r25, r18
    23c4:	08 f4       	brcc	.+2      	; 0x23c8 <Log_voidPrintNumber+0x1e>
    23c6:	87 c0       	rjmp	.+270    	; 0x24d6 <Log_voidPrintNumber+0x12c>
	{
		Local_u8Factor = (u8)(Copy_u16Val / (u16) 10000);
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	9b 81       	ldd	r25, Y+3	; 0x03
    23cc:	20 e1       	ldi	r18, 0x10	; 16
    23ce:	37 e2       	ldi	r19, 0x27	; 39
    23d0:	b9 01       	movw	r22, r18
    23d2:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    23d6:	cb 01       	movw	r24, r22
    23d8:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	80 5d       	subi	r24, 0xD0	; 208
    23de:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Copy_u16Val = Copy_u16Val - (u16)(Local_u8Factor * (u16)10000);
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	80 e1       	ldi	r24, 0x10	; 16
    23ea:	97 e2       	ldi	r25, 0x27	; 39
    23ec:	a9 01       	movw	r20, r18
    23ee:	48 9f       	mul	r20, r24
    23f0:	90 01       	movw	r18, r0
    23f2:	49 9f       	mul	r20, r25
    23f4:	30 0d       	add	r19, r0
    23f6:	58 9f       	mul	r21, r24
    23f8:	30 0d       	add	r19, r0
    23fa:	11 24       	eor	r1, r1
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	82 1b       	sub	r24, r18
    2402:	93 0b       	sbc	r25, r19
    2404:	9b 83       	std	Y+3, r25	; 0x03
    2406:	8a 83       	std	Y+2, r24	; 0x02

		Local_u8Factor = (u8)(Copy_u16Val / (u16) 1000);
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	9b 81       	ldd	r25, Y+3	; 0x03
    240c:	28 ee       	ldi	r18, 0xE8	; 232
    240e:	33 e0       	ldi	r19, 0x03	; 3
    2410:	b9 01       	movw	r22, r18
    2412:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    2416:	cb 01       	movw	r24, r22
    2418:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	80 5d       	subi	r24, 0xD0	; 208
    241e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Copy_u16Val = Copy_u16Val - (u16)(Local_u8Factor * (u16)1000);
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	88 ee       	ldi	r24, 0xE8	; 232
    242a:	93 e0       	ldi	r25, 0x03	; 3
    242c:	a9 01       	movw	r20, r18
    242e:	48 9f       	mul	r20, r24
    2430:	90 01       	movw	r18, r0
    2432:	49 9f       	mul	r20, r25
    2434:	30 0d       	add	r19, r0
    2436:	58 9f       	mul	r21, r24
    2438:	30 0d       	add	r19, r0
    243a:	11 24       	eor	r1, r1
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	9b 81       	ldd	r25, Y+3	; 0x03
    2440:	82 1b       	sub	r24, r18
    2442:	93 0b       	sbc	r25, r19
    2444:	9b 83       	std	Y+3, r25	; 0x03
    2446:	8a 83       	std	Y+2, r24	; 0x02

		Local_u8Factor = (u8)(Copy_u16Val / (u16) 100);
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	9b 81       	ldd	r25, Y+3	; 0x03
    244c:	24 e6       	ldi	r18, 0x64	; 100
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	b9 01       	movw	r22, r18
    2452:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    2456:	cb 01       	movw	r24, r22
    2458:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	80 5d       	subi	r24, 0xD0	; 208
    245e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Copy_u16Val = Copy_u16Val - (u16)(Local_u8Factor * (u8)100);
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	8c e9       	ldi	r24, 0x9C	; 156
    246a:	9f ef       	ldi	r25, 0xFF	; 255
    246c:	ac 01       	movw	r20, r24
    246e:	24 9f       	mul	r18, r20
    2470:	c0 01       	movw	r24, r0
    2472:	25 9f       	mul	r18, r21
    2474:	90 0d       	add	r25, r0
    2476:	34 9f       	mul	r19, r20
    2478:	90 0d       	add	r25, r0
    247a:	11 24       	eor	r1, r1
    247c:	9c 01       	movw	r18, r24
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	9b 81       	ldd	r25, Y+3	; 0x03
    2482:	82 0f       	add	r24, r18
    2484:	93 1f       	adc	r25, r19
    2486:	9b 83       	std	Y+3, r25	; 0x03
    2488:	8a 83       	std	Y+2, r24	; 0x02

		Local_u8Factor = (u8)(Copy_u16Val / (u16) 10);
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	9b 81       	ldd	r25, Y+3	; 0x03
    248e:	2a e0       	ldi	r18, 0x0A	; 10
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	b9 01       	movw	r22, r18
    2494:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    2498:	cb 01       	movw	r24, r22
    249a:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	80 5d       	subi	r24, 0xD0	; 208
    24a0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Local_u8Factor = Copy_u16Val - (u16)(Local_u8Factor * (u8)10);
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	88 2f       	mov	r24, r24
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9c 01       	movw	r18, r24
    24ac:	22 0f       	add	r18, r18
    24ae:	33 1f       	adc	r19, r19
    24b0:	c9 01       	movw	r24, r18
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	82 0f       	add	r24, r18
    24bc:	93 1f       	adc	r25, r19
    24be:	90 95       	com	r25
    24c0:	81 95       	neg	r24
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	98 2f       	mov	r25, r24
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	89 0f       	add	r24, r25
    24ca:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	80 5d       	subi	r24, 0xD0	; 208
    24d0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
    24d4:	e7 c0       	rjmp	.+462    	; 0x26a4 <Log_voidPrintNumber+0x2fa>

	}

	else if (Copy_u16Val >= (u16) 1000 )
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	9b 81       	ldd	r25, Y+3	; 0x03
    24da:	53 e0       	ldi	r21, 0x03	; 3
    24dc:	88 3e       	cpi	r24, 0xE8	; 232
    24de:	95 07       	cpc	r25, r21
    24e0:	08 f4       	brcc	.+2      	; 0x24e4 <Log_voidPrintNumber+0x13a>
    24e2:	67 c0       	rjmp	.+206    	; 0x25b2 <Log_voidPrintNumber+0x208>
	{
		Local_u8Factor = (u8)(Copy_u16Val / (u16) 1000);
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	9b 81       	ldd	r25, Y+3	; 0x03
    24e8:	28 ee       	ldi	r18, 0xE8	; 232
    24ea:	33 e0       	ldi	r19, 0x03	; 3
    24ec:	b9 01       	movw	r22, r18
    24ee:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    24f2:	cb 01       	movw	r24, r22
    24f4:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	80 5d       	subi	r24, 0xD0	; 208
    24fa:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Copy_u16Val = Copy_u16Val - (u16)(Local_u8Factor * (u16)1000);
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	88 ee       	ldi	r24, 0xE8	; 232
    2506:	93 e0       	ldi	r25, 0x03	; 3
    2508:	a9 01       	movw	r20, r18
    250a:	48 9f       	mul	r20, r24
    250c:	90 01       	movw	r18, r0
    250e:	49 9f       	mul	r20, r25
    2510:	30 0d       	add	r19, r0
    2512:	58 9f       	mul	r21, r24
    2514:	30 0d       	add	r19, r0
    2516:	11 24       	eor	r1, r1
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	9b 81       	ldd	r25, Y+3	; 0x03
    251c:	82 1b       	sub	r24, r18
    251e:	93 0b       	sbc	r25, r19
    2520:	9b 83       	std	Y+3, r25	; 0x03
    2522:	8a 83       	std	Y+2, r24	; 0x02

		Local_u8Factor = (u8)(Copy_u16Val / (u16) 100);
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	9b 81       	ldd	r25, Y+3	; 0x03
    2528:	24 e6       	ldi	r18, 0x64	; 100
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	b9 01       	movw	r22, r18
    252e:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    2532:	cb 01       	movw	r24, r22
    2534:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	80 5d       	subi	r24, 0xD0	; 208
    253a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Copy_u16Val = Copy_u16Val - (u16)(Local_u8Factor * (u8)100);
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	8c e9       	ldi	r24, 0x9C	; 156
    2546:	9f ef       	ldi	r25, 0xFF	; 255
    2548:	ac 01       	movw	r20, r24
    254a:	24 9f       	mul	r18, r20
    254c:	c0 01       	movw	r24, r0
    254e:	25 9f       	mul	r18, r21
    2550:	90 0d       	add	r25, r0
    2552:	34 9f       	mul	r19, r20
    2554:	90 0d       	add	r25, r0
    2556:	11 24       	eor	r1, r1
    2558:	9c 01       	movw	r18, r24
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	82 0f       	add	r24, r18
    2560:	93 1f       	adc	r25, r19
    2562:	9b 83       	std	Y+3, r25	; 0x03
    2564:	8a 83       	std	Y+2, r24	; 0x02

		Local_u8Factor = (u8)(Copy_u16Val / (u16) 10);
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	9b 81       	ldd	r25, Y+3	; 0x03
    256a:	2a e0       	ldi	r18, 0x0A	; 10
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	b9 01       	movw	r22, r18
    2570:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    2574:	cb 01       	movw	r24, r22
    2576:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	80 5d       	subi	r24, 0xD0	; 208
    257c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Local_u8Factor = Copy_u16Val - (u16)(Local_u8Factor * (u8)10);
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	88 2f       	mov	r24, r24
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	9c 01       	movw	r18, r24
    2588:	22 0f       	add	r18, r18
    258a:	33 1f       	adc	r19, r19
    258c:	c9 01       	movw	r24, r18
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	82 0f       	add	r24, r18
    2598:	93 1f       	adc	r25, r19
    259a:	90 95       	com	r25
    259c:	81 95       	neg	r24
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	98 2f       	mov	r25, r24
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	89 0f       	add	r24, r25
    25a6:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	80 5d       	subi	r24, 0xD0	; 208
    25ac:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
    25b0:	79 c0       	rjmp	.+242    	; 0x26a4 <Log_voidPrintNumber+0x2fa>
	}

	else if (Copy_u16Val >= (u8)100 )
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	84 36       	cpi	r24, 0x64	; 100
    25b8:	91 05       	cpc	r25, r1
    25ba:	08 f4       	brcc	.+2      	; 0x25be <Log_voidPrintNumber+0x214>
    25bc:	47 c0       	rjmp	.+142    	; 0x264c <Log_voidPrintNumber+0x2a2>
	{
		Local_u8Factor = (u8)(Copy_u16Val / (u16) 100);
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	9b 81       	ldd	r25, Y+3	; 0x03
    25c2:	24 e6       	ldi	r18, 0x64	; 100
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	b9 01       	movw	r22, r18
    25c8:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    25cc:	cb 01       	movw	r24, r22
    25ce:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	80 5d       	subi	r24, 0xD0	; 208
    25d4:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Copy_u16Val = Copy_u16Val - (u16)(Local_u8Factor * (u8)100);
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	8c e9       	ldi	r24, 0x9C	; 156
    25e0:	9f ef       	ldi	r25, 0xFF	; 255
    25e2:	ac 01       	movw	r20, r24
    25e4:	24 9f       	mul	r18, r20
    25e6:	c0 01       	movw	r24, r0
    25e8:	25 9f       	mul	r18, r21
    25ea:	90 0d       	add	r25, r0
    25ec:	34 9f       	mul	r19, r20
    25ee:	90 0d       	add	r25, r0
    25f0:	11 24       	eor	r1, r1
    25f2:	9c 01       	movw	r18, r24
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	9b 83       	std	Y+3, r25	; 0x03
    25fe:	8a 83       	std	Y+2, r24	; 0x02

		Local_u8Factor = (u8)(Copy_u16Val / (u16) 10);
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	9b 81       	ldd	r25, Y+3	; 0x03
    2604:	2a e0       	ldi	r18, 0x0A	; 10
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	b9 01       	movw	r22, r18
    260a:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    260e:	cb 01       	movw	r24, r22
    2610:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	80 5d       	subi	r24, 0xD0	; 208
    2616:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Local_u8Factor = Copy_u16Val - (u16)(Local_u8Factor * (u8)10);
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	88 2f       	mov	r24, r24
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9c 01       	movw	r18, r24
    2622:	22 0f       	add	r18, r18
    2624:	33 1f       	adc	r19, r19
    2626:	c9 01       	movw	r24, r18
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	90 95       	com	r25
    2636:	81 95       	neg	r24
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	98 2f       	mov	r25, r24
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	89 0f       	add	r24, r25
    2640:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	80 5d       	subi	r24, 0xD0	; 208
    2646:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
    264a:	2c c0       	rjmp	.+88     	; 0x26a4 <Log_voidPrintNumber+0x2fa>
	}

	else if (Copy_u16Val >= (u8) 10 )
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	8a 30       	cpi	r24, 0x0A	; 10
    2652:	91 05       	cpc	r25, r1
    2654:	18 f1       	brcs	.+70     	; 0x269c <Log_voidPrintNumber+0x2f2>
	{
		Local_u8Factor = (u8)((u8)Copy_u16Val / (u8) 10);
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9a e0       	ldi	r25, 0x0A	; 10
    265a:	69 2f       	mov	r22, r25
    265c:	0e 94 28 1b 	call	0x3650	; 0x3650 <__udivmodqi4>
    2660:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	80 5d       	subi	r24, 0xD0	; 208
    2666:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
		Local_u8Factor = Copy_u16Val - (u16)(Local_u8Factor * (u8)10);
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	88 2f       	mov	r24, r24
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9c 01       	movw	r18, r24
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	c9 01       	movw	r24, r18
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	82 0f       	add	r24, r18
    2682:	93 1f       	adc	r25, r19
    2684:	90 95       	com	r25
    2686:	81 95       	neg	r24
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	98 2f       	mov	r25, r24
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	89 0f       	add	r24, r25
    2690:	89 83       	std	Y+1, r24	; 0x01
		 LCD_voidsendDATA(Local_u8Factor+48);
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	80 5d       	subi	r24, 0xD0	; 208
    2696:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <Log_voidPrintNumber+0x2fa>
	}

	else
	{
		 LCD_voidsendDATA(Copy_u16Val+48);
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	80 5d       	subi	r24, 0xD0	; 208
    26a0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <LCD_voidsendDATA>
	}
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <keypad_voidInit>:
#include "../Keypad_driver/keypad_interface.h"
#define F_CPU 8000000UL
#include<util/delay.h>
u8 keypad_Array[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'D','0','=','+'}};
void keypad_voidInit(void)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62

// set 4 pins as outputs for columns
	DIO_voidsetpindirection(keypad_PORT,keypad_COLUM1_PIN,DIO_u8PIN_OUTPUT);
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	41 e0       	ldi	r20, 0x01	; 1
    26be:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>
	DIO_voidsetpindirection(keypad_PORT,keypad_COLUM2_PIN,DIO_u8PIN_OUTPUT);
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	41 e0       	ldi	r20, 0x01	; 1
    26c8:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>
	DIO_voidsetpindirection(keypad_PORT,keypad_COLUM3_PIN,DIO_u8PIN_OUTPUT);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	62 e0       	ldi	r22, 0x02	; 2
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>
	DIO_voidsetpindirection(keypad_PORT,keypad_COLUM4_PIN,DIO_u8PIN_OUTPUT);
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	63 e0       	ldi	r22, 0x03	; 3
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>


	// set 4 pins as inputs for Rows
		DIO_voidsetpindirection(keypad_PORT,keypad_ROW1_PIN,DIO_u8PIN_INPUT);
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	64 e0       	ldi	r22, 0x04	; 4
    26e4:	40 e0       	ldi	r20, 0x00	; 0
    26e6:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>
		DIO_voidsetpindirection(keypad_PORT,keypad_ROW2_PIN,DIO_u8PIN_INPUT);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	65 e0       	ldi	r22, 0x05	; 5
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>
		DIO_voidsetpindirection(keypad_PORT,keypad_ROW3_PIN,DIO_u8PIN_INPUT);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	66 e0       	ldi	r22, 0x06	; 6
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>
		DIO_voidsetpindirection(keypad_PORT,keypad_ROW4_PIN,DIO_u8PIN_INPUT);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	67 e0       	ldi	r22, 0x07	; 7
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>


// set ROWS to be pull up resistor,colmns to 5v
		DIO_voidsetportvalue(keypad_PORT,0xFF);
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	6f ef       	ldi	r22, 0xFF	; 255
    270c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <DIO_voidsetportvalue>



}
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <keypad_u8GetPressedkey>:
u8 keypad_u8GetPressedkey(void)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	61 97       	sbiw	r28, 0x11	; 17
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Pressedkey='$';
    272a:	84 e2       	ldi	r24, 0x24	; 36
    272c:	89 8b       	std	Y+17, r24	; 0x11

    for(u8 Col_num=0;Col_num<4;Col_num++)
    272e:	18 8a       	std	Y+16, r1	; 0x10
    2730:	ac c0       	rjmp	.+344    	; 0x288a <keypad_u8GetPressedkey+0x174>
    {
    	DIO_voidsetpinvalue(keypad_PORT,Col_num, DIO_u8PIN_LOW);
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	68 89       	ldd	r22, Y+16	; 0x10
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>


    	for(u8 Row_num=4;Row_num<=7;Row_num++)
    273c:	84 e0       	ldi	r24, 0x04	; 4
    273e:	8f 87       	std	Y+15, r24	; 0x0f
    2740:	98 c0       	rjmp	.+304    	; 0x2872 <keypad_u8GetPressedkey+0x15c>
    	{


    		if(DIO_u8getpinvalue(keypad_PORT,Row_num)==DIO_u8PIN_LOW)
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	6f 85       	ldd	r22, Y+15	; 0x0f
    2746:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <DIO_u8getpinvalue>
    274a:	88 23       	and	r24, r24
    274c:	09 f0       	breq	.+2      	; 0x2750 <keypad_u8GetPressedkey+0x3a>
    274e:	8e c0       	rjmp	.+284    	; 0x286c <keypad_u8GetPressedkey+0x156>
    		{
    			local_u8Pressedkey= keypad_Array[Row_num-4][Col_num];
    2750:	8f 85       	ldd	r24, Y+15	; 0x0f
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	ac 01       	movw	r20, r24
    2758:	44 50       	subi	r20, 0x04	; 4
    275a:	50 40       	sbci	r21, 0x00	; 0
    275c:	88 89       	ldd	r24, Y+16	; 0x10
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	ca 01       	movw	r24, r20
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	82 0f       	add	r24, r18
    276e:	93 1f       	adc	r25, r19
    2770:	fc 01       	movw	r30, r24
    2772:	e2 51       	subi	r30, 0x12	; 18
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	89 8b       	std	Y+17, r24	; 0x11
    			while(DIO_u8getpinvalue(keypad_PORT,Row_num)==DIO_u8PIN_LOW);
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	6f 85       	ldd	r22, Y+15	; 0x0f
    277e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <DIO_u8getpinvalue>
    2782:	88 23       	and	r24, r24
    2784:	d1 f3       	breq	.-12     	; 0x277a <keypad_u8GetPressedkey+0x64>
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	a0 ea       	ldi	r26, 0xA0	; 160
    278c:	b1 e4       	ldi	r27, 0x41	; 65
    278e:	8b 87       	std	Y+11, r24	; 0x0b
    2790:	9c 87       	std	Y+12, r25	; 0x0c
    2792:	ad 87       	std	Y+13, r26	; 0x0d
    2794:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2796:	6b 85       	ldd	r22, Y+11	; 0x0b
    2798:	7c 85       	ldd	r23, Y+12	; 0x0c
    279a:	8d 85       	ldd	r24, Y+13	; 0x0d
    279c:	9e 85       	ldd	r25, Y+14	; 0x0e
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4a ef       	ldi	r20, 0xFA	; 250
    27a4:	54 e4       	ldi	r21, 0x44	; 68
    27a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	8f 83       	std	Y+7, r24	; 0x07
    27b0:	98 87       	std	Y+8, r25	; 0x08
    27b2:	a9 87       	std	Y+9, r26	; 0x09
    27b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b6:	6f 81       	ldd	r22, Y+7	; 0x07
    27b8:	78 85       	ldd	r23, Y+8	; 0x08
    27ba:	89 85       	ldd	r24, Y+9	; 0x09
    27bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e8       	ldi	r20, 0x80	; 128
    27c4:	5f e3       	ldi	r21, 0x3F	; 63
    27c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27ca:	88 23       	and	r24, r24
    27cc:	2c f4       	brge	.+10     	; 0x27d8 <keypad_u8GetPressedkey+0xc2>
		__ticks = 1;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	3f c0       	rjmp	.+126    	; 0x2856 <keypad_u8GetPressedkey+0x140>
	else if (__tmp > 65535)
    27d8:	6f 81       	ldd	r22, Y+7	; 0x07
    27da:	78 85       	ldd	r23, Y+8	; 0x08
    27dc:	89 85       	ldd	r24, Y+9	; 0x09
    27de:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	4c f5       	brge	.+82     	; 0x2842 <keypad_u8GetPressedkey+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e2       	ldi	r20, 0x20	; 32
    27fe:	51 e4       	ldi	r21, 0x41	; 65
    2800:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	0f c0       	rjmp	.+30     	; 0x2838 <keypad_u8GetPressedkey+0x122>
    281a:	88 ec       	ldi	r24, 0xC8	; 200
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	8b 83       	std	Y+3, r24	; 0x03
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <keypad_u8GetPressedkey+0x110>
    282a:	9c 83       	std	Y+4, r25	; 0x04
    282c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	69 f7       	brne	.-38     	; 0x281a <keypad_u8GetPressedkey+0x104>
    2840:	1c c0       	rjmp	.+56     	; 0x287a <keypad_u8GetPressedkey+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2842:	6f 81       	ldd	r22, Y+7	; 0x07
    2844:	78 85       	ldd	r23, Y+8	; 0x08
    2846:	89 85       	ldd	r24, Y+9	; 0x09
    2848:	9a 85       	ldd	r25, Y+10	; 0x0a
    284a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	9a 81       	ldd	r25, Y+2	; 0x02
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <keypad_u8GetPressedkey+0x14c>
    2866:	9a 83       	std	Y+2, r25	; 0x02
    2868:	89 83       	std	Y+1, r24	; 0x01
    286a:	07 c0       	rjmp	.+14     	; 0x287a <keypad_u8GetPressedkey+0x164>
    for(u8 Col_num=0;Col_num<4;Col_num++)
    {
    	DIO_voidsetpinvalue(keypad_PORT,Col_num, DIO_u8PIN_LOW);


    	for(u8 Row_num=4;Row_num<=7;Row_num++)
    286c:	8f 85       	ldd	r24, Y+15	; 0x0f
    286e:	8f 5f       	subi	r24, 0xFF	; 255
    2870:	8f 87       	std	Y+15, r24	; 0x0f
    2872:	8f 85       	ldd	r24, Y+15	; 0x0f
    2874:	88 30       	cpi	r24, 0x08	; 8
    2876:	08 f4       	brcc	.+2      	; 0x287a <keypad_u8GetPressedkey+0x164>
    2878:	64 cf       	rjmp	.-312    	; 0x2742 <keypad_u8GetPressedkey+0x2c>

    		}

    	}

    	DIO_voidsetpinvalue(keypad_PORT,Col_num, DIO_u8PIN_HIGH);
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	68 89       	ldd	r22, Y+16	; 0x10
    287e:	41 e0       	ldi	r20, 0x01	; 1
    2880:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
}
u8 keypad_u8GetPressedkey(void)
{
	u8 local_u8Pressedkey='$';

    for(u8 Col_num=0;Col_num<4;Col_num++)
    2884:	88 89       	ldd	r24, Y+16	; 0x10
    2886:	8f 5f       	subi	r24, 0xFF	; 255
    2888:	88 8b       	std	Y+16, r24	; 0x10
    288a:	88 89       	ldd	r24, Y+16	; 0x10
    288c:	84 30       	cpi	r24, 0x04	; 4
    288e:	08 f4       	brcc	.+2      	; 0x2892 <keypad_u8GetPressedkey+0x17c>
    2890:	50 cf       	rjmp	.-352    	; 0x2732 <keypad_u8GetPressedkey+0x1c>





	return local_u8Pressedkey;
    2892:	89 89       	ldd	r24, Y+17	; 0x11

}
    2894:	61 96       	adiw	r28, 0x11	; 17
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <EEPROM_Init>:
 */
#include"../../library/STD_types.h"
#include"../../library/bitmath.h"
#include"../../MCAL/I2C/IIC_interface.h"

void EEPROM_Init(void){
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterINST(0b10100100);
    28ae:	84 ea       	ldi	r24, 0xA4	; 164
    28b0:	0e 94 99 09 	call	0x1332	; 0x1332 <TWI_voidMasterINST>
}
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <EEPROM_WriteData>:


void EEPROM_WriteData(u8 loc, u8 data){
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <EEPROM_WriteData+0x6>
    28c0:	0f 92       	push	r0
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	8a 83       	std	Y+2, r24	; 0x02
    28c8:	6b 83       	std	Y+3, r22	; 0x03
	 u8 i=0;
    28ca:	19 82       	std	Y+1, r1	; 0x01
	    TWI_SendStartcondition();
    28cc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <TWI_SendStartcondition>

		TWI_SendSlaveAddressWithWrite(  0xA0  );
    28d0:	80 ea       	ldi	r24, 0xA0	; 160
    28d2:	0e 94 3f 0a 	call	0x147e	; 0x147e <TWI_SendSlaveAddressWithWrite>
		TWI_MasterSendDataByte(loc);
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_MasterSendDataByte>
		TWI_MasterSendDataByte(    data );
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_MasterSendDataByte>


		IIC_voidSendStopcondition();
    28e2:	0e 94 23 0b 	call	0x1646	; 0x1646 <IIC_voidSendStopcondition>

}
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <EEPROM_ReadData>:

void EEPROM_ReadData(u8 loc, u8 *data){
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <EEPROM_ReadData+0x6>
    28f8:	0f 92       	push	r0
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	7b 83       	std	Y+3, r23	; 0x03
    2902:	6a 83       	std	Y+2, r22	; 0x02




		    TWI_SendStartcondition();
    2904:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <TWI_SendStartcondition>

		    TWI_SendSlaveAddressWithWrite(  0xA0  );
    2908:	80 ea       	ldi	r24, 0xA0	; 160
    290a:	0e 94 3f 0a 	call	0x147e	; 0x147e <TWI_SendSlaveAddressWithWrite>
			TWI_MasterSendDataByte(loc);
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_MasterSendDataByte>

			TWI_SendRepeatedStart();
    2914:	0e 94 13 0a 	call	0x1426	; 0x1426 <TWI_SendRepeatedStart>
			TWI_MasterSendDataByte(0xA1);
    2918:	81 ea       	ldi	r24, 0xA1	; 161
    291a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_MasterSendDataByte>


			TWI_MasterReceiveDataByte(data);
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	9b 81       	ldd	r25, Y+3	; 0x03
    2922:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <TWI_MasterReceiveDataByte>
			IIC_voidSendStopcondition();
    2926:	0e 94 23 0b 	call	0x1646	; 0x1646 <IIC_voidSendStopcondition>



}
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <BuzzerINIT>:
#include"../../library/bitmath.h"
#include"../../MCAL//DIO_driver/DIO_interface.h"
#include<util/delay.h>
#define F_CPU 8000000UL
void BuzzerINIT()
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
	Buzzer_port_INIT();
    293e:	82 e0       	ldi	r24, 0x02	; 2
    2940:	63 e0       	ldi	r22, 0x03	; 3
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_voidsetpindirection>
}
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <Buzzer_3_sec>:

void Buzzer_3_sec()
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	e8 97       	sbiw	r28, 0x38	; 56
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
	Buzzer_on();
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	63 e0       	ldi	r22, 0x03	; 3
    2966:	41 e0       	ldi	r20, 0x01	; 1
    2968:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	aa e7       	ldi	r26, 0x7A	; 122
    2972:	b4 e4       	ldi	r27, 0x44	; 68
    2974:	8d ab       	std	Y+53, r24	; 0x35
    2976:	9e ab       	std	Y+54, r25	; 0x36
    2978:	af ab       	std	Y+55, r26	; 0x37
    297a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6d a9       	ldd	r22, Y+53	; 0x35
    297e:	7e a9       	ldd	r23, Y+54	; 0x36
    2980:	8f a9       	ldd	r24, Y+55	; 0x37
    2982:	98 ad       	ldd	r25, Y+56	; 0x38
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a ef       	ldi	r20, 0xFA	; 250
    298a:	54 e4       	ldi	r21, 0x44	; 68
    298c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	89 ab       	std	Y+49, r24	; 0x31
    2996:	9a ab       	std	Y+50, r25	; 0x32
    2998:	ab ab       	std	Y+51, r26	; 0x33
    299a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    299c:	69 a9       	ldd	r22, Y+49	; 0x31
    299e:	7a a9       	ldd	r23, Y+50	; 0x32
    29a0:	8b a9       	ldd	r24, Y+51	; 0x33
    29a2:	9c a9       	ldd	r25, Y+52	; 0x34
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <Buzzer_3_sec+0x70>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	98 ab       	std	Y+48, r25	; 0x30
    29ba:	8f a7       	std	Y+47, r24	; 0x2f
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <Buzzer_3_sec+0xee>
	else if (__tmp > 65535)
    29be:	69 a9       	ldd	r22, Y+49	; 0x31
    29c0:	7a a9       	ldd	r23, Y+50	; 0x32
    29c2:	8b a9       	ldd	r24, Y+51	; 0x33
    29c4:	9c a9       	ldd	r25, Y+52	; 0x34
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <Buzzer_3_sec+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6d a9       	ldd	r22, Y+53	; 0x35
    29d8:	7e a9       	ldd	r23, Y+54	; 0x36
    29da:	8f a9       	ldd	r24, Y+55	; 0x37
    29dc:	98 ad       	ldd	r25, Y+56	; 0x38
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	98 ab       	std	Y+48, r25	; 0x30
    29fc:	8f a7       	std	Y+47, r24	; 0x2f
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <Buzzer_3_sec+0xd0>
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9e a7       	std	Y+46, r25	; 0x2e
    2a06:	8d a7       	std	Y+45, r24	; 0x2d
    2a08:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <Buzzer_3_sec+0xbe>
    2a10:	9e a7       	std	Y+46, r25	; 0x2e
    2a12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a16:	98 a9       	ldd	r25, Y+48	; 0x30
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	98 ab       	std	Y+48, r25	; 0x30
    2a1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a20:	98 a9       	ldd	r25, Y+48	; 0x30
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <Buzzer_3_sec+0xb2>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <Buzzer_3_sec+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	69 a9       	ldd	r22, Y+49	; 0x31
    2a2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	98 ab       	std	Y+48, r25	; 0x30
    2a3a:	8f a7       	std	Y+47, r24	; 0x2f
    2a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a40:	9c a7       	std	Y+44, r25	; 0x2c
    2a42:	8b a7       	std	Y+43, r24	; 0x2b
    2a44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <Buzzer_3_sec+0xfa>
    2a4c:	9c a7       	std	Y+44, r25	; 0x2c
    2a4e:	8b a7       	std	Y+43, r24	; 0x2b
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	aa e7       	ldi	r26, 0x7A	; 122
    2a56:	b4 e4       	ldi	r27, 0x44	; 68
    2a58:	8f a3       	std	Y+39, r24	; 0x27
    2a5a:	98 a7       	std	Y+40, r25	; 0x28
    2a5c:	a9 a7       	std	Y+41, r26	; 0x29
    2a5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a60:	6f a1       	ldd	r22, Y+39	; 0x27
    2a62:	78 a5       	ldd	r23, Y+40	; 0x28
    2a64:	89 a5       	ldd	r24, Y+41	; 0x29
    2a66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4a ef       	ldi	r20, 0xFA	; 250
    2a6e:	54 e4       	ldi	r21, 0x44	; 68
    2a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8b a3       	std	Y+35, r24	; 0x23
    2a7a:	9c a3       	std	Y+36, r25	; 0x24
    2a7c:	ad a3       	std	Y+37, r26	; 0x25
    2a7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a80:	6b a1       	ldd	r22, Y+35	; 0x23
    2a82:	7c a1       	ldd	r23, Y+36	; 0x24
    2a84:	8d a1       	ldd	r24, Y+37	; 0x25
    2a86:	9e a1       	ldd	r25, Y+38	; 0x26
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a94:	88 23       	and	r24, r24
    2a96:	2c f4       	brge	.+10     	; 0x2aa2 <Buzzer_3_sec+0x154>
		__ticks = 1;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9a a3       	std	Y+34, r25	; 0x22
    2a9e:	89 a3       	std	Y+33, r24	; 0x21
    2aa0:	3f c0       	rjmp	.+126    	; 0x2b20 <Buzzer_3_sec+0x1d2>
	else if (__tmp > 65535)
    2aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	4c f5       	brge	.+82     	; 0x2b0c <Buzzer_3_sec+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aba:	6f a1       	ldd	r22, Y+39	; 0x27
    2abc:	78 a5       	ldd	r23, Y+40	; 0x28
    2abe:	89 a5       	ldd	r24, Y+41	; 0x29
    2ac0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e2       	ldi	r20, 0x20	; 32
    2ac8:	51 e4       	ldi	r21, 0x41	; 65
    2aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9a a3       	std	Y+34, r25	; 0x22
    2ae0:	89 a3       	std	Y+33, r24	; 0x21
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <Buzzer_3_sec+0x1b4>
    2ae4:	88 ec       	ldi	r24, 0xC8	; 200
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	98 a3       	std	Y+32, r25	; 0x20
    2aea:	8f 8f       	std	Y+31, r24	; 0x1f
    2aec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aee:	98 a1       	ldd	r25, Y+32	; 0x20
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <Buzzer_3_sec+0x1a2>
    2af4:	98 a3       	std	Y+32, r25	; 0x20
    2af6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	89 a1       	ldd	r24, Y+33	; 0x21
    2afa:	9a a1       	ldd	r25, Y+34	; 0x22
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	9a a3       	std	Y+34, r25	; 0x22
    2b00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	89 a1       	ldd	r24, Y+33	; 0x21
    2b04:	9a a1       	ldd	r25, Y+34	; 0x22
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <Buzzer_3_sec+0x196>
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <Buzzer_3_sec+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b10:	8d a1       	ldd	r24, Y+37	; 0x25
    2b12:	9e a1       	ldd	r25, Y+38	; 0x26
    2b14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9a a3       	std	Y+34, r25	; 0x22
    2b1e:	89 a3       	std	Y+33, r24	; 0x21
    2b20:	89 a1       	ldd	r24, Y+33	; 0x21
    2b22:	9a a1       	ldd	r25, Y+34	; 0x22
    2b24:	9e 8f       	std	Y+30, r25	; 0x1e
    2b26:	8d 8f       	std	Y+29, r24	; 0x1d
    2b28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <Buzzer_3_sec+0x1de>
    2b30:	9e 8f       	std	Y+30, r25	; 0x1e
    2b32:	8d 8f       	std	Y+29, r24	; 0x1d
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	aa e7       	ldi	r26, 0x7A	; 122
    2b3a:	b4 e4       	ldi	r27, 0x44	; 68
    2b3c:	89 8f       	std	Y+25, r24	; 0x19
    2b3e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b40:	ab 8f       	std	Y+27, r26	; 0x1b
    2b42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b44:	69 8d       	ldd	r22, Y+25	; 0x19
    2b46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	4a ef       	ldi	r20, 0xFA	; 250
    2b52:	54 e4       	ldi	r21, 0x44	; 68
    2b54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8d 8b       	std	Y+21, r24	; 0x15
    2b5e:	9e 8b       	std	Y+22, r25	; 0x16
    2b60:	af 8b       	std	Y+23, r26	; 0x17
    2b62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b64:	6d 89       	ldd	r22, Y+21	; 0x15
    2b66:	7e 89       	ldd	r23, Y+22	; 0x16
    2b68:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e8       	ldi	r20, 0x80	; 128
    2b72:	5f e3       	ldi	r21, 0x3F	; 63
    2b74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b78:	88 23       	and	r24, r24
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <Buzzer_3_sec+0x238>
		__ticks = 1;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9c 8b       	std	Y+20, r25	; 0x14
    2b82:	8b 8b       	std	Y+19, r24	; 0x13
    2b84:	3f c0       	rjmp	.+126    	; 0x2c04 <Buzzer_3_sec+0x2b6>
	else if (__tmp > 65535)
    2b86:	6d 89       	ldd	r22, Y+21	; 0x15
    2b88:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	3f ef       	ldi	r19, 0xFF	; 255
    2b92:	4f e7       	ldi	r20, 0x7F	; 127
    2b94:	57 e4       	ldi	r21, 0x47	; 71
    2b96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b9a:	18 16       	cp	r1, r24
    2b9c:	4c f5       	brge	.+82     	; 0x2bf0 <Buzzer_3_sec+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e2       	ldi	r20, 0x20	; 32
    2bac:	51 e4       	ldi	r21, 0x41	; 65
    2bae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9c 8b       	std	Y+20, r25	; 0x14
    2bc4:	8b 8b       	std	Y+19, r24	; 0x13
    2bc6:	0f c0       	rjmp	.+30     	; 0x2be6 <Buzzer_3_sec+0x298>
    2bc8:	88 ec       	ldi	r24, 0xC8	; 200
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9a 8b       	std	Y+18, r25	; 0x12
    2bce:	89 8b       	std	Y+17, r24	; 0x11
    2bd0:	89 89       	ldd	r24, Y+17	; 0x11
    2bd2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <Buzzer_3_sec+0x286>
    2bd8:	9a 8b       	std	Y+18, r25	; 0x12
    2bda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bde:	9c 89       	ldd	r25, Y+20	; 0x14
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	9c 8b       	std	Y+20, r25	; 0x14
    2be4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be6:	8b 89       	ldd	r24, Y+19	; 0x13
    2be8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	69 f7       	brne	.-38     	; 0x2bc8 <Buzzer_3_sec+0x27a>
    2bee:	14 c0       	rjmp	.+40     	; 0x2c18 <Buzzer_3_sec+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9c 8b       	std	Y+20, r25	; 0x14
    2c02:	8b 8b       	std	Y+19, r24	; 0x13
    2c04:	8b 89       	ldd	r24, Y+19	; 0x13
    2c06:	9c 89       	ldd	r25, Y+20	; 0x14
    2c08:	98 8b       	std	Y+16, r25	; 0x10
    2c0a:	8f 87       	std	Y+15, r24	; 0x0f
    2c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0e:	98 89       	ldd	r25, Y+16	; 0x10
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <Buzzer_3_sec+0x2c2>
    2c14:	98 8b       	std	Y+16, r25	; 0x10
    2c16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	Buzzer_off();
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	63 e0       	ldi	r22, 0x03	; 3
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	a8 ec       	ldi	r26, 0xC8	; 200
    2c28:	b2 e4       	ldi	r27, 0x42	; 66
    2c2a:	8b 87       	std	Y+11, r24	; 0x0b
    2c2c:	9c 87       	std	Y+12, r25	; 0x0c
    2c2e:	ad 87       	std	Y+13, r26	; 0x0d
    2c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a ef       	ldi	r20, 0xFA	; 250
    2c40:	54 e4       	ldi	r21, 0x44	; 68
    2c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	8f 83       	std	Y+7, r24	; 0x07
    2c4c:	98 87       	std	Y+8, r25	; 0x08
    2c4e:	a9 87       	std	Y+9, r26	; 0x09
    2c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c52:	6f 81       	ldd	r22, Y+7	; 0x07
    2c54:	78 85       	ldd	r23, Y+8	; 0x08
    2c56:	89 85       	ldd	r24, Y+9	; 0x09
    2c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e8       	ldi	r20, 0x80	; 128
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c66:	88 23       	and	r24, r24
    2c68:	2c f4       	brge	.+10     	; 0x2c74 <Buzzer_3_sec+0x326>
		__ticks = 1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
    2c72:	3f c0       	rjmp	.+126    	; 0x2cf2 <Buzzer_3_sec+0x3a4>
	else if (__tmp > 65535)
    2c74:	6f 81       	ldd	r22, Y+7	; 0x07
    2c76:	78 85       	ldd	r23, Y+8	; 0x08
    2c78:	89 85       	ldd	r24, Y+9	; 0x09
    2c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	3f ef       	ldi	r19, 0xFF	; 255
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	57 e4       	ldi	r21, 0x47	; 71
    2c84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	4c f5       	brge	.+82     	; 0x2cde <Buzzer_3_sec+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	51 e4       	ldi	r21, 0x41	; 65
    2c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <Buzzer_3_sec+0x386>
    2cb6:	88 ec       	ldi	r24, 0xC8	; 200
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9c 83       	std	Y+4, r25	; 0x04
    2cbc:	8b 83       	std	Y+3, r24	; 0x03
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	f1 f7       	brne	.-4      	; 0x2cc2 <Buzzer_3_sec+0x374>
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <Buzzer_3_sec+0x368>
    2cdc:	14 c0       	rjmp	.+40     	; 0x2d06 <Buzzer_3_sec+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cde:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce0:	78 85       	ldd	r23, Y+8	; 0x08
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <Buzzer_3_sec+0x3b0>
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    2d06:	e8 96       	adiw	r28, 0x38	; 56
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <Buzzer_100_ms>:
void Buzzer_100_ms()
{
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	6c 97       	sbiw	r28, 0x1c	; 28
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
	Buzzer_on();
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	63 e0       	ldi	r22, 0x03	; 3
    2d30:	41 e0       	ldi	r20, 0x01	; 1
    2d32:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a8 ec       	ldi	r26, 0xC8	; 200
    2d3c:	b2 e4       	ldi	r27, 0x42	; 66
    2d3e:	89 8f       	std	Y+25, r24	; 0x19
    2d40:	9a 8f       	std	Y+26, r25	; 0x1a
    2d42:	ab 8f       	std	Y+27, r26	; 0x1b
    2d44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	69 8d       	ldd	r22, Y+25	; 0x19
    2d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	4a ef       	ldi	r20, 0xFA	; 250
    2d54:	54 e4       	ldi	r21, 0x44	; 68
    2d56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	8d 8b       	std	Y+21, r24	; 0x15
    2d60:	9e 8b       	std	Y+22, r25	; 0x16
    2d62:	af 8b       	std	Y+23, r26	; 0x17
    2d64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d66:	6d 89       	ldd	r22, Y+21	; 0x15
    2d68:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	2c f4       	brge	.+10     	; 0x2d88 <Buzzer_100_ms+0x70>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9c 8b       	std	Y+20, r25	; 0x14
    2d84:	8b 8b       	std	Y+19, r24	; 0x13
    2d86:	3f c0       	rjmp	.+126    	; 0x2e06 <Buzzer_100_ms+0xee>
	else if (__tmp > 65535)
    2d88:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	3f ef       	ldi	r19, 0xFF	; 255
    2d94:	4f e7       	ldi	r20, 0x7F	; 127
    2d96:	57 e4       	ldi	r21, 0x47	; 71
    2d98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d9c:	18 16       	cp	r1, r24
    2d9e:	4c f5       	brge	.+82     	; 0x2df2 <Buzzer_100_ms+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da0:	69 8d       	ldd	r22, Y+25	; 0x19
    2da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9c 8b       	std	Y+20, r25	; 0x14
    2dc6:	8b 8b       	std	Y+19, r24	; 0x13
    2dc8:	0f c0       	rjmp	.+30     	; 0x2de8 <Buzzer_100_ms+0xd0>
    2dca:	88 ec       	ldi	r24, 0xC8	; 200
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9a 8b       	std	Y+18, r25	; 0x12
    2dd0:	89 8b       	std	Y+17, r24	; 0x11
    2dd2:	89 89       	ldd	r24, Y+17	; 0x11
    2dd4:	9a 89       	ldd	r25, Y+18	; 0x12
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <Buzzer_100_ms+0xbe>
    2dda:	9a 8b       	std	Y+18, r25	; 0x12
    2ddc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dde:	8b 89       	ldd	r24, Y+19	; 0x13
    2de0:	9c 89       	ldd	r25, Y+20	; 0x14
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	9c 8b       	std	Y+20, r25	; 0x14
    2de6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dea:	9c 89       	ldd	r25, Y+20	; 0x14
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f7       	brne	.-38     	; 0x2dca <Buzzer_100_ms+0xb2>
    2df0:	14 c0       	rjmp	.+40     	; 0x2e1a <Buzzer_100_ms+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df2:	6d 89       	ldd	r22, Y+21	; 0x15
    2df4:	7e 89       	ldd	r23, Y+22	; 0x16
    2df6:	8f 89       	ldd	r24, Y+23	; 0x17
    2df8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9c 8b       	std	Y+20, r25	; 0x14
    2e04:	8b 8b       	std	Y+19, r24	; 0x13
    2e06:	8b 89       	ldd	r24, Y+19	; 0x13
    2e08:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0a:	98 8b       	std	Y+16, r25	; 0x10
    2e0c:	8f 87       	std	Y+15, r24	; 0x0f
    2e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e10:	98 89       	ldd	r25, Y+16	; 0x10
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <Buzzer_100_ms+0xfa>
    2e16:	98 8b       	std	Y+16, r25	; 0x10
    2e18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	Buzzer_off();
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	63 e0       	ldi	r22, 0x03	; 3
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a0 e2       	ldi	r26, 0x20	; 32
    2e2a:	b1 e4       	ldi	r27, 0x41	; 65
    2e2c:	8b 87       	std	Y+11, r24	; 0x0b
    2e2e:	9c 87       	std	Y+12, r25	; 0x0c
    2e30:	ad 87       	std	Y+13, r26	; 0x0d
    2e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4a ef       	ldi	r20, 0xFA	; 250
    2e42:	54 e4       	ldi	r21, 0x44	; 68
    2e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	8f 83       	std	Y+7, r24	; 0x07
    2e4e:	98 87       	std	Y+8, r25	; 0x08
    2e50:	a9 87       	std	Y+9, r26	; 0x09
    2e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e54:	6f 81       	ldd	r22, Y+7	; 0x07
    2e56:	78 85       	ldd	r23, Y+8	; 0x08
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e8       	ldi	r20, 0x80	; 128
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e68:	88 23       	and	r24, r24
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <Buzzer_100_ms+0x15e>
		__ticks = 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
    2e74:	3f c0       	rjmp	.+126    	; 0x2ef4 <Buzzer_100_ms+0x1dc>
	else if (__tmp > 65535)
    2e76:	6f 81       	ldd	r22, Y+7	; 0x07
    2e78:	78 85       	ldd	r23, Y+8	; 0x08
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	3f ef       	ldi	r19, 0xFF	; 255
    2e82:	4f e7       	ldi	r20, 0x7F	; 127
    2e84:	57 e4       	ldi	r21, 0x47	; 71
    2e86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e8a:	18 16       	cp	r1, r24
    2e8c:	4c f5       	brge	.+82     	; 0x2ee0 <Buzzer_100_ms+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e2       	ldi	r20, 0x20	; 32
    2e9c:	51 e4       	ldi	r21, 0x41	; 65
    2e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	0f c0       	rjmp	.+30     	; 0x2ed6 <Buzzer_100_ms+0x1be>
    2eb8:	88 ec       	ldi	r24, 0xC8	; 200
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	9c 83       	std	Y+4, r25	; 0x04
    2ebe:	8b 83       	std	Y+3, r24	; 0x03
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <Buzzer_100_ms+0x1ac>
    2ec8:	9c 83       	std	Y+4, r25	; 0x04
    2eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ece:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <Buzzer_100_ms+0x1a0>
    2ede:	14 c0       	rjmp	.+40     	; 0x2f08 <Buzzer_100_ms+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee2:	78 85       	ldd	r23, Y+8	; 0x08
    2ee4:	89 85       	ldd	r24, Y+9	; 0x09
    2ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	9a 81       	ldd	r25, Y+2	; 0x02
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <Buzzer_100_ms+0x1e8>
    2f04:	9a 83       	std	Y+2, r25	; 0x02
    2f06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2f08:	6c 96       	adiw	r28, 0x1c	; 28
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <main>:
#include "app/locker.h"
#include<util/delay.h>
#define F_CPU 8000000UL

int main(void)
{
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	c6 55       	subi	r28, 0x56	; 86
    2f28:	d0 40       	sbci	r29, 0x00	; 0
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
	System_init();							// Initialize system modules
    2f34:	0e 94 9b 05 	call	0xb36	; 0xb36 <System_init>
	LCD_voidsendstring("Welcome");
    2f38:	82 e8       	ldi	r24, 0x82	; 130
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
    2f40:	fe 01       	movw	r30, r28
    2f42:	ef 5a       	subi	r30, 0xAF	; 175
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	aa e7       	ldi	r26, 0x7A	; 122
    2f4c:	b4 e4       	ldi	r27, 0x44	; 68
    2f4e:	80 83       	st	Z, r24
    2f50:	91 83       	std	Z+1, r25	; 0x01
    2f52:	a2 83       	std	Z+2, r26	; 0x02
    2f54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	8e 01       	movw	r16, r28
    2f58:	03 5b       	subi	r16, 0xB3	; 179
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	ef 5a       	subi	r30, 0xAF	; 175
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4a ef       	ldi	r20, 0xFA	; 250
    2f70:	54 e4       	ldi	r21, 0x44	; 68
    2f72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 83       	st	Z, r24
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	a2 83       	std	Z+2, r26	; 0x02
    2f82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f84:	fe 01       	movw	r30, r28
    2f86:	e3 5b       	subi	r30, 0xB3	; 179
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	60 81       	ld	r22, Z
    2f8c:	71 81       	ldd	r23, Z+1	; 0x01
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	93 81       	ldd	r25, Z+3	; 0x03
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e8       	ldi	r20, 0x80	; 128
    2f98:	5f e3       	ldi	r21, 0x3F	; 63
    2f9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f9e:	88 23       	and	r24, r24
    2fa0:	44 f4       	brge	.+16     	; 0x2fb2 <main+0x98>
		__ticks = 1;
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e5 5b       	subi	r30, 0xB5	; 181
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	91 83       	std	Z+1, r25	; 0x01
    2fae:	80 83       	st	Z, r24
    2fb0:	64 c0       	rjmp	.+200    	; 0x307a <main+0x160>
	else if (__tmp > 65535)
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e3 5b       	subi	r30, 0xB3	; 179
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	60 81       	ld	r22, Z
    2fba:	71 81       	ldd	r23, Z+1	; 0x01
    2fbc:	82 81       	ldd	r24, Z+2	; 0x02
    2fbe:	93 81       	ldd	r25, Z+3	; 0x03
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	3f ef       	ldi	r19, 0xFF	; 255
    2fc4:	4f e7       	ldi	r20, 0x7F	; 127
    2fc6:	57 e4       	ldi	r21, 0x47	; 71
    2fc8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fcc:	18 16       	cp	r1, r24
    2fce:	0c f0       	brlt	.+2      	; 0x2fd2 <main+0xb8>
    2fd0:	43 c0       	rjmp	.+134    	; 0x3058 <main+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	ef 5a       	subi	r30, 0xAF	; 175
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	60 81       	ld	r22, Z
    2fda:	71 81       	ldd	r23, Z+1	; 0x01
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	93 81       	ldd	r25, Z+3	; 0x03
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e2       	ldi	r20, 0x20	; 32
    2fe6:	51 e4       	ldi	r21, 0x41	; 65
    2fe8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	8e 01       	movw	r16, r28
    2ff2:	05 5b       	subi	r16, 0xB5	; 181
    2ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	f8 01       	movw	r30, r16
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24
    3008:	1f c0       	rjmp	.+62     	; 0x3048 <main+0x12e>
    300a:	fe 01       	movw	r30, r28
    300c:	e7 5b       	subi	r30, 0xB7	; 183
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	88 ec       	ldi	r24, 0xC8	; 200
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	91 83       	std	Z+1, r25	; 0x01
    3016:	80 83       	st	Z, r24
    3018:	fe 01       	movw	r30, r28
    301a:	e7 5b       	subi	r30, 0xB7	; 183
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <main+0x108>
    3026:	fe 01       	movw	r30, r28
    3028:	e7 5b       	subi	r30, 0xB7	; 183
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	91 83       	std	Z+1, r25	; 0x01
    302e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	de 01       	movw	r26, r28
    3032:	a5 5b       	subi	r26, 0xB5	; 181
    3034:	bf 4f       	sbci	r27, 0xFF	; 255
    3036:	fe 01       	movw	r30, r28
    3038:	e5 5b       	subi	r30, 0xB5	; 181
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	80 81       	ld	r24, Z
    303e:	91 81       	ldd	r25, Z+1	; 0x01
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	11 96       	adiw	r26, 0x01	; 1
    3044:	9c 93       	st	X, r25
    3046:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3048:	fe 01       	movw	r30, r28
    304a:	e5 5b       	subi	r30, 0xB5	; 181
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 81       	ld	r24, Z
    3050:	91 81       	ldd	r25, Z+1	; 0x01
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	d1 f6       	brne	.-76     	; 0x300a <main+0xf0>
    3056:	27 c0       	rjmp	.+78     	; 0x30a6 <main+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3058:	8e 01       	movw	r16, r28
    305a:	05 5b       	subi	r16, 0xB5	; 181
    305c:	1f 4f       	sbci	r17, 0xFF	; 255
    305e:	fe 01       	movw	r30, r28
    3060:	e3 5b       	subi	r30, 0xB3	; 179
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	60 81       	ld	r22, Z
    3066:	71 81       	ldd	r23, Z+1	; 0x01
    3068:	82 81       	ldd	r24, Z+2	; 0x02
    306a:	93 81       	ldd	r25, Z+3	; 0x03
    306c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	f8 01       	movw	r30, r16
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	80 83       	st	Z, r24
    307a:	de 01       	movw	r26, r28
    307c:	a9 5b       	subi	r26, 0xB9	; 185
    307e:	bf 4f       	sbci	r27, 0xFF	; 255
    3080:	fe 01       	movw	r30, r28
    3082:	e5 5b       	subi	r30, 0xB5	; 181
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	8d 93       	st	X+, r24
    308c:	9c 93       	st	X, r25
    308e:	fe 01       	movw	r30, r28
    3090:	e9 5b       	subi	r30, 0xB9	; 185
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	f1 f7       	brne	.-4      	; 0x3098 <main+0x17e>
    309c:	fe 01       	movw	r30, r28
    309e:	e9 5b       	subi	r30, 0xB9	; 185
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_voidsendcommand(0x01);
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
	u8 locker_closed = 1;					// Variable holds the state of the locker whether open or closed
    30ac:	fe 01       	movw	r30, r28
    30ae:	ea 5a       	subi	r30, 0xAA	; 170
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	80 83       	st	Z, r24
	checkMemory();							// Set initial password valid only if this is first time to use
    30b6:	0e 94 af 05 	call	0xb5e	; 0xb5e <checkMemory>
	LCD_voidsendstring("Enter init code");
    30ba:	8a e8       	ldi	r24, 0x8A	; 138
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
    30c2:	fe 01       	movw	r30, r28
    30c4:	ed 5b       	subi	r30, 0xBD	; 189
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	aa e7       	ldi	r26, 0x7A	; 122
    30ce:	b4 e4       	ldi	r27, 0x44	; 68
    30d0:	80 83       	st	Z, r24
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	a2 83       	std	Z+2, r26	; 0x02
    30d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d8:	8e 01       	movw	r16, r28
    30da:	01 5c       	subi	r16, 0xC1	; 193
    30dc:	1f 4f       	sbci	r17, 0xFF	; 255
    30de:	fe 01       	movw	r30, r28
    30e0:	ed 5b       	subi	r30, 0xBD	; 189
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	60 81       	ld	r22, Z
    30e6:	71 81       	ldd	r23, Z+1	; 0x01
    30e8:	82 81       	ldd	r24, Z+2	; 0x02
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a ef       	ldi	r20, 0xFA	; 250
    30f2:	54 e4       	ldi	r21, 0x44	; 68
    30f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	f8 01       	movw	r30, r16
    30fe:	80 83       	st	Z, r24
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	a2 83       	std	Z+2, r26	; 0x02
    3104:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3106:	fe 01       	movw	r30, r28
    3108:	ff 96       	adiw	r30, 0x3f	; 63
    310a:	60 81       	ld	r22, Z
    310c:	71 81       	ldd	r23, Z+1	; 0x01
    310e:	82 81       	ldd	r24, Z+2	; 0x02
    3110:	93 81       	ldd	r25, Z+3	; 0x03
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e8       	ldi	r20, 0x80	; 128
    3118:	5f e3       	ldi	r21, 0x3F	; 63
    311a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    311e:	88 23       	and	r24, r24
    3120:	2c f4       	brge	.+10     	; 0x312c <main+0x212>
		__ticks = 1;
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	9e af       	std	Y+62, r25	; 0x3e
    3128:	8d af       	std	Y+61, r24	; 0x3d
    312a:	46 c0       	rjmp	.+140    	; 0x31b8 <main+0x29e>
	else if (__tmp > 65535)
    312c:	fe 01       	movw	r30, r28
    312e:	ff 96       	adiw	r30, 0x3f	; 63
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	3f ef       	ldi	r19, 0xFF	; 255
    313c:	4f e7       	ldi	r20, 0x7F	; 127
    313e:	57 e4       	ldi	r21, 0x47	; 71
    3140:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3144:	18 16       	cp	r1, r24
    3146:	64 f5       	brge	.+88     	; 0x31a0 <main+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3148:	fe 01       	movw	r30, r28
    314a:	ed 5b       	subi	r30, 0xBD	; 189
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	60 81       	ld	r22, Z
    3150:	71 81       	ldd	r23, Z+1	; 0x01
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	93 81       	ldd	r25, Z+3	; 0x03
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e2       	ldi	r20, 0x20	; 32
    315c:	51 e4       	ldi	r21, 0x41	; 65
    315e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	9e af       	std	Y+62, r25	; 0x3e
    3174:	8d af       	std	Y+61, r24	; 0x3d
    3176:	0f c0       	rjmp	.+30     	; 0x3196 <main+0x27c>
    3178:	88 ec       	ldi	r24, 0xC8	; 200
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	9c af       	std	Y+60, r25	; 0x3c
    317e:	8b af       	std	Y+59, r24	; 0x3b
    3180:	8b ad       	ldd	r24, Y+59	; 0x3b
    3182:	9c ad       	ldd	r25, Y+60	; 0x3c
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <main+0x26a>
    3188:	9c af       	std	Y+60, r25	; 0x3c
    318a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318c:	8d ad       	ldd	r24, Y+61	; 0x3d
    318e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	9e af       	std	Y+62, r25	; 0x3e
    3194:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3196:	8d ad       	ldd	r24, Y+61	; 0x3d
    3198:	9e ad       	ldd	r25, Y+62	; 0x3e
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	69 f7       	brne	.-38     	; 0x3178 <main+0x25e>
    319e:	16 c0       	rjmp	.+44     	; 0x31cc <main+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a0:	fe 01       	movw	r30, r28
    31a2:	ff 96       	adiw	r30, 0x3f	; 63
    31a4:	60 81       	ld	r22, Z
    31a6:	71 81       	ldd	r23, Z+1	; 0x01
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9e af       	std	Y+62, r25	; 0x3e
    31b6:	8d af       	std	Y+61, r24	; 0x3d
    31b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    31bc:	9a af       	std	Y+58, r25	; 0x3a
    31be:	89 af       	std	Y+57, r24	; 0x39
    31c0:	89 ad       	ldd	r24, Y+57	; 0x39
    31c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <main+0x2aa>
    31c8:	9a af       	std	Y+58, r25	; 0x3a
    31ca:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		LCD_voidsendcommand(0x01);
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>

	u8 errorStatus = enterPassword();				// Enter password to open the locker
    31d2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <enterPassword>
    31d6:	fe 01       	movw	r30, r28
    31d8:	eb 5a       	subi	r30, 0xAB	; 171
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 83       	st	Z, r24
    31de:	08 c0       	rjmp	.+16     	; 0x31f0 <main+0x2d6>
	while (errorStatus)						// Locker remains closed until user enters correct password
	{
		Buzzer_3_sec();						// Activate buzzer for 3 seconds
    31e0:	0e 94 a7 14 	call	0x294e	; 0x294e <Buzzer_3_sec>
		errorStatus = enterPassword();				// Enter password to open the locker
    31e4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <enterPassword>
    31e8:	fe 01       	movw	r30, r28
    31ea:	eb 5a       	subi	r30, 0xAB	; 171
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	80 83       	st	Z, r24
	LCD_voidsendstring("Enter init code");
		_delay_ms(1000);
		LCD_voidsendcommand(0x01);

	u8 errorStatus = enterPassword();				// Enter password to open the locker
	while (errorStatus)						// Locker remains closed until user enters correct password
    31f0:	fe 01       	movw	r30, r28
    31f2:	eb 5a       	subi	r30, 0xAB	; 171
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	80 81       	ld	r24, Z
    31f8:	88 23       	and	r24, r24
    31fa:	91 f7       	brne	.-28     	; 0x31e0 <main+0x2c6>
	{
		Buzzer_3_sec();						// Activate buzzer for 3 seconds
		errorStatus = enterPassword();				// Enter password to open the locker
	}
	locker_closed = 0;						// locker is now open
    31fc:	fe 01       	movw	r30, r28
    31fe:	ea 5a       	subi	r30, 0xAA	; 170
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	10 82       	st	Z, r1

	while(1)
    {
		if(!locker_closed)
    3204:	fe 01       	movw	r30, r28
    3206:	ea 5a       	subi	r30, 0xAA	; 170
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 81       	ld	r24, Z
    320c:	88 23       	and	r24, r24
    320e:	09 f0       	breq	.+2      	; 0x3212 <main+0x2f8>
    3210:	08 c1       	rjmp	.+528    	; 0x3422 <main+0x508>
		{   LED_ON();
    3212:	82 e0       	ldi	r24, 0x02	; 2
    3214:	64 e0       	ldi	r22, 0x04	; 4
    3216:	41 e0       	ldi	r20, 0x01	; 1
    3218:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
			LCD_voidsendstring("Door is open");
    321c:	8a e9       	ldi	r24, 0x9A	; 154
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	aa e7       	ldi	r26, 0x7A	; 122
    322a:	b4 e4       	ldi	r27, 0x44	; 68
    322c:	8d ab       	std	Y+53, r24	; 0x35
    322e:	9e ab       	std	Y+54, r25	; 0x36
    3230:	af ab       	std	Y+55, r26	; 0x37
    3232:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3234:	6d a9       	ldd	r22, Y+53	; 0x35
    3236:	7e a9       	ldd	r23, Y+54	; 0x36
    3238:	8f a9       	ldd	r24, Y+55	; 0x37
    323a:	98 ad       	ldd	r25, Y+56	; 0x38
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	4a ef       	ldi	r20, 0xFA	; 250
    3242:	54 e4       	ldi	r21, 0x44	; 68
    3244:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	89 ab       	std	Y+49, r24	; 0x31
    324e:	9a ab       	std	Y+50, r25	; 0x32
    3250:	ab ab       	std	Y+51, r26	; 0x33
    3252:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3254:	69 a9       	ldd	r22, Y+49	; 0x31
    3256:	7a a9       	ldd	r23, Y+50	; 0x32
    3258:	8b a9       	ldd	r24, Y+51	; 0x33
    325a:	9c a9       	ldd	r25, Y+52	; 0x34
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e8       	ldi	r20, 0x80	; 128
    3262:	5f e3       	ldi	r21, 0x3F	; 63
    3264:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3268:	88 23       	and	r24, r24
    326a:	2c f4       	brge	.+10     	; 0x3276 <main+0x35c>
		__ticks = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	98 ab       	std	Y+48, r25	; 0x30
    3272:	8f a7       	std	Y+47, r24	; 0x2f
    3274:	3f c0       	rjmp	.+126    	; 0x32f4 <main+0x3da>
	else if (__tmp > 65535)
    3276:	69 a9       	ldd	r22, Y+49	; 0x31
    3278:	7a a9       	ldd	r23, Y+50	; 0x32
    327a:	8b a9       	ldd	r24, Y+51	; 0x33
    327c:	9c a9       	ldd	r25, Y+52	; 0x34
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	3f ef       	ldi	r19, 0xFF	; 255
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	57 e4       	ldi	r21, 0x47	; 71
    3286:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	4c f5       	brge	.+82     	; 0x32e0 <main+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328e:	6d a9       	ldd	r22, Y+53	; 0x35
    3290:	7e a9       	ldd	r23, Y+54	; 0x36
    3292:	8f a9       	ldd	r24, Y+55	; 0x37
    3294:	98 ad       	ldd	r25, Y+56	; 0x38
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e2       	ldi	r20, 0x20	; 32
    329c:	51 e4       	ldi	r21, 0x41	; 65
    329e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	98 ab       	std	Y+48, r25	; 0x30
    32b4:	8f a7       	std	Y+47, r24	; 0x2f
    32b6:	0f c0       	rjmp	.+30     	; 0x32d6 <main+0x3bc>
    32b8:	88 ec       	ldi	r24, 0xC8	; 200
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	9e a7       	std	Y+46, r25	; 0x2e
    32be:	8d a7       	std	Y+45, r24	; 0x2d
    32c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    32c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <main+0x3aa>
    32c8:	9e a7       	std	Y+46, r25	; 0x2e
    32ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ce:	98 a9       	ldd	r25, Y+48	; 0x30
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	98 ab       	std	Y+48, r25	; 0x30
    32d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d8:	98 a9       	ldd	r25, Y+48	; 0x30
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <main+0x39e>
    32de:	14 c0       	rjmp	.+40     	; 0x3308 <main+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e0:	69 a9       	ldd	r22, Y+49	; 0x31
    32e2:	7a a9       	ldd	r23, Y+50	; 0x32
    32e4:	8b a9       	ldd	r24, Y+51	; 0x33
    32e6:	9c a9       	ldd	r25, Y+52	; 0x34
    32e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	98 ab       	std	Y+48, r25	; 0x30
    32f2:	8f a7       	std	Y+47, r24	; 0x2f
    32f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32f6:	98 a9       	ldd	r25, Y+48	; 0x30
    32f8:	9c a7       	std	Y+44, r25	; 0x2c
    32fa:	8b a7       	std	Y+43, r24	; 0x2b
    32fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    32fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <main+0x3e6>
    3304:	9c a7       	std	Y+44, r25	; 0x2c
    3306:	8b a7       	std	Y+43, r24	; 0x2b
		     _delay_ms(1000);
		   LCD_voidsendcommand(0x01);
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
								// LED ON indicates open locker
			LCD_voidsendstring("to change code *");
    330e:	87 ea       	ldi	r24, 0xA7	; 167
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
			 LCD_voidGoToXY(0,1);
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	61 e0       	ldi	r22, 0x01	; 1
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	0e 94 9b 11 	call	0x2336	; 0x2336 <LCD_voidGoToXY>
			 LCD_voidsendstring("to close door D");
    3322:	88 eb       	ldi	r24, 0xB8	; 184
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	aa e7       	ldi	r26, 0x7A	; 122
    3330:	b4 e4       	ldi	r27, 0x44	; 68
    3332:	8f a3       	std	Y+39, r24	; 0x27
    3334:	98 a7       	std	Y+40, r25	; 0x28
    3336:	a9 a7       	std	Y+41, r26	; 0x29
    3338:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333a:	6f a1       	ldd	r22, Y+39	; 0x27
    333c:	78 a5       	ldd	r23, Y+40	; 0x28
    333e:	89 a5       	ldd	r24, Y+41	; 0x29
    3340:	9a a5       	ldd	r25, Y+42	; 0x2a
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4a ef       	ldi	r20, 0xFA	; 250
    3348:	54 e4       	ldi	r21, 0x44	; 68
    334a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	8b a3       	std	Y+35, r24	; 0x23
    3354:	9c a3       	std	Y+36, r25	; 0x24
    3356:	ad a3       	std	Y+37, r26	; 0x25
    3358:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    335a:	6b a1       	ldd	r22, Y+35	; 0x23
    335c:	7c a1       	ldd	r23, Y+36	; 0x24
    335e:	8d a1       	ldd	r24, Y+37	; 0x25
    3360:	9e a1       	ldd	r25, Y+38	; 0x26
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e8       	ldi	r20, 0x80	; 128
    3368:	5f e3       	ldi	r21, 0x3F	; 63
    336a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    336e:	88 23       	and	r24, r24
    3370:	2c f4       	brge	.+10     	; 0x337c <main+0x462>
		__ticks = 1;
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	9a a3       	std	Y+34, r25	; 0x22
    3378:	89 a3       	std	Y+33, r24	; 0x21
    337a:	3f c0       	rjmp	.+126    	; 0x33fa <main+0x4e0>
	else if (__tmp > 65535)
    337c:	6b a1       	ldd	r22, Y+35	; 0x23
    337e:	7c a1       	ldd	r23, Y+36	; 0x24
    3380:	8d a1       	ldd	r24, Y+37	; 0x25
    3382:	9e a1       	ldd	r25, Y+38	; 0x26
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	3f ef       	ldi	r19, 0xFF	; 255
    3388:	4f e7       	ldi	r20, 0x7F	; 127
    338a:	57 e4       	ldi	r21, 0x47	; 71
    338c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3390:	18 16       	cp	r1, r24
    3392:	4c f5       	brge	.+82     	; 0x33e6 <main+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3394:	6f a1       	ldd	r22, Y+39	; 0x27
    3396:	78 a5       	ldd	r23, Y+40	; 0x28
    3398:	89 a5       	ldd	r24, Y+41	; 0x29
    339a:	9a a5       	ldd	r25, Y+42	; 0x2a
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e2       	ldi	r20, 0x20	; 32
    33a2:	51 e4       	ldi	r21, 0x41	; 65
    33a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	bc 01       	movw	r22, r24
    33ae:	cd 01       	movw	r24, r26
    33b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9a a3       	std	Y+34, r25	; 0x22
    33ba:	89 a3       	std	Y+33, r24	; 0x21
    33bc:	0f c0       	rjmp	.+30     	; 0x33dc <main+0x4c2>
    33be:	88 ec       	ldi	r24, 0xC8	; 200
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	98 a3       	std	Y+32, r25	; 0x20
    33c4:	8f 8f       	std	Y+31, r24	; 0x1f
    33c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c8:	98 a1       	ldd	r25, Y+32	; 0x20
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <main+0x4b0>
    33ce:	98 a3       	std	Y+32, r25	; 0x20
    33d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d2:	89 a1       	ldd	r24, Y+33	; 0x21
    33d4:	9a a1       	ldd	r25, Y+34	; 0x22
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	9a a3       	std	Y+34, r25	; 0x22
    33da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33dc:	89 a1       	ldd	r24, Y+33	; 0x21
    33de:	9a a1       	ldd	r25, Y+34	; 0x22
    33e0:	00 97       	sbiw	r24, 0x00	; 0
    33e2:	69 f7       	brne	.-38     	; 0x33be <main+0x4a4>
    33e4:	14 c0       	rjmp	.+40     	; 0x340e <main+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e6:	6b a1       	ldd	r22, Y+35	; 0x23
    33e8:	7c a1       	ldd	r23, Y+36	; 0x24
    33ea:	8d a1       	ldd	r24, Y+37	; 0x25
    33ec:	9e a1       	ldd	r25, Y+38	; 0x26
    33ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9a a3       	std	Y+34, r25	; 0x22
    33f8:	89 a3       	std	Y+33, r24	; 0x21
    33fa:	89 a1       	ldd	r24, Y+33	; 0x21
    33fc:	9a a1       	ldd	r25, Y+34	; 0x22
    33fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3400:	8d 8f       	std	Y+29, r24	; 0x1d
    3402:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3404:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <main+0x4ec>
    340a:	9e 8f       	std	Y+30, r25	; 0x1e
    340c:	8d 8f       	std	Y+29, r24	; 0x1d
			 _delay_ms(1000);
			LCD_voidsendcommand(0x01);
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
			locker_closed = takeOpenLockerActions();	// Change password & activate buzzer if pressing wrong keys
    3414:	0e 94 64 08 	call	0x10c8	; 0x10c8 <takeOpenLockerActions>
    3418:	fe 01       	movw	r30, r28
    341a:	ea 5a       	subi	r30, 0xAA	; 170
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 83       	st	Z, r24
    3420:	f1 ce       	rjmp	.-542    	; 0x3204 <main+0x2ea>
		}

		else
		{
			LED_OFF();
    3422:	82 e0       	ldi	r24, 0x02	; 2
    3424:	64 e0       	ldi	r22, 0x04	; 4
    3426:	40 e0       	ldi	r20, 0x00	; 0
    3428:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_voidsetpinvalue>
			 LCD_voidsendcommand(0x01);
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
			LCD_voidsendstring("Door is closed");
    3432:	88 ec       	ldi	r24, 0xC8	; 200
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	aa e7       	ldi	r26, 0x7A	; 122
    3440:	b4 e4       	ldi	r27, 0x44	; 68
    3442:	89 8f       	std	Y+25, r24	; 0x19
    3444:	9a 8f       	std	Y+26, r25	; 0x1a
    3446:	ab 8f       	std	Y+27, r26	; 0x1b
    3448:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344a:	69 8d       	ldd	r22, Y+25	; 0x19
    344c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    344e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	4a ef       	ldi	r20, 0xFA	; 250
    3458:	54 e4       	ldi	r21, 0x44	; 68
    345a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	8d 8b       	std	Y+21, r24	; 0x15
    3464:	9e 8b       	std	Y+22, r25	; 0x16
    3466:	af 8b       	std	Y+23, r26	; 0x17
    3468:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    346a:	6d 89       	ldd	r22, Y+21	; 0x15
    346c:	7e 89       	ldd	r23, Y+22	; 0x16
    346e:	8f 89       	ldd	r24, Y+23	; 0x17
    3470:	98 8d       	ldd	r25, Y+24	; 0x18
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e8       	ldi	r20, 0x80	; 128
    3478:	5f e3       	ldi	r21, 0x3F	; 63
    347a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    347e:	88 23       	and	r24, r24
    3480:	2c f4       	brge	.+10     	; 0x348c <main+0x572>
		__ticks = 1;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9c 8b       	std	Y+20, r25	; 0x14
    3488:	8b 8b       	std	Y+19, r24	; 0x13
    348a:	3f c0       	rjmp	.+126    	; 0x350a <main+0x5f0>
	else if (__tmp > 65535)
    348c:	6d 89       	ldd	r22, Y+21	; 0x15
    348e:	7e 89       	ldd	r23, Y+22	; 0x16
    3490:	8f 89       	ldd	r24, Y+23	; 0x17
    3492:	98 8d       	ldd	r25, Y+24	; 0x18
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	3f ef       	ldi	r19, 0xFF	; 255
    3498:	4f e7       	ldi	r20, 0x7F	; 127
    349a:	57 e4       	ldi	r21, 0x47	; 71
    349c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34a0:	18 16       	cp	r1, r24
    34a2:	4c f5       	brge	.+82     	; 0x34f6 <main+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a4:	69 8d       	ldd	r22, Y+25	; 0x19
    34a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e2       	ldi	r20, 0x20	; 32
    34b2:	51 e4       	ldi	r21, 0x41	; 65
    34b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9c 8b       	std	Y+20, r25	; 0x14
    34ca:	8b 8b       	std	Y+19, r24	; 0x13
    34cc:	0f c0       	rjmp	.+30     	; 0x34ec <main+0x5d2>
    34ce:	88 ec       	ldi	r24, 0xC8	; 200
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	9a 8b       	std	Y+18, r25	; 0x12
    34d4:	89 8b       	std	Y+17, r24	; 0x11
    34d6:	89 89       	ldd	r24, Y+17	; 0x11
    34d8:	9a 89       	ldd	r25, Y+18	; 0x12
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <main+0x5c0>
    34de:	9a 8b       	std	Y+18, r25	; 0x12
    34e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e2:	8b 89       	ldd	r24, Y+19	; 0x13
    34e4:	9c 89       	ldd	r25, Y+20	; 0x14
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	9c 8b       	std	Y+20, r25	; 0x14
    34ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ec:	8b 89       	ldd	r24, Y+19	; 0x13
    34ee:	9c 89       	ldd	r25, Y+20	; 0x14
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	69 f7       	brne	.-38     	; 0x34ce <main+0x5b4>
    34f4:	14 c0       	rjmp	.+40     	; 0x351e <main+0x604>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f6:	6d 89       	ldd	r22, Y+21	; 0x15
    34f8:	7e 89       	ldd	r23, Y+22	; 0x16
    34fa:	8f 89       	ldd	r24, Y+23	; 0x17
    34fc:	98 8d       	ldd	r25, Y+24	; 0x18
    34fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	9c 8b       	std	Y+20, r25	; 0x14
    3508:	8b 8b       	std	Y+19, r24	; 0x13
    350a:	8b 89       	ldd	r24, Y+19	; 0x13
    350c:	9c 89       	ldd	r25, Y+20	; 0x14
    350e:	98 8b       	std	Y+16, r25	; 0x10
    3510:	8f 87       	std	Y+15, r24	; 0x0f
    3512:	8f 85       	ldd	r24, Y+15	; 0x0f
    3514:	98 89       	ldd	r25, Y+16	; 0x10
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <main+0x5fc>
    351a:	98 8b       	std	Y+16, r25	; 0x10
    351c:	8f 87       	std	Y+15, r24	; 0x0f
			 _delay_ms(1000);
			 LCD_voidsendcommand(0x01);
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidsendcommand>
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	a8 ec       	ldi	r26, 0xC8	; 200
    352a:	b2 e4       	ldi	r27, 0x42	; 66
    352c:	8b 87       	std	Y+11, r24	; 0x0b
    352e:	9c 87       	std	Y+12, r25	; 0x0c
    3530:	ad 87       	std	Y+13, r26	; 0x0d
    3532:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3534:	6b 85       	ldd	r22, Y+11	; 0x0b
    3536:	7c 85       	ldd	r23, Y+12	; 0x0c
    3538:	8d 85       	ldd	r24, Y+13	; 0x0d
    353a:	9e 85       	ldd	r25, Y+14	; 0x0e
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	4a ef       	ldi	r20, 0xFA	; 250
    3542:	54 e4       	ldi	r21, 0x44	; 68
    3544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	8f 83       	std	Y+7, r24	; 0x07
    354e:	98 87       	std	Y+8, r25	; 0x08
    3550:	a9 87       	std	Y+9, r26	; 0x09
    3552:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3554:	6f 81       	ldd	r22, Y+7	; 0x07
    3556:	78 85       	ldd	r23, Y+8	; 0x08
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e8       	ldi	r20, 0x80	; 128
    3562:	5f e3       	ldi	r21, 0x3F	; 63
    3564:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3568:	88 23       	and	r24, r24
    356a:	2c f4       	brge	.+10     	; 0x3576 <main+0x65c>
		__ticks = 1;
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	9e 83       	std	Y+6, r25	; 0x06
    3572:	8d 83       	std	Y+5, r24	; 0x05
    3574:	3f c0       	rjmp	.+126    	; 0x35f4 <main+0x6da>
	else if (__tmp > 65535)
    3576:	6f 81       	ldd	r22, Y+7	; 0x07
    3578:	78 85       	ldd	r23, Y+8	; 0x08
    357a:	89 85       	ldd	r24, Y+9	; 0x09
    357c:	9a 85       	ldd	r25, Y+10	; 0x0a
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	3f ef       	ldi	r19, 0xFF	; 255
    3582:	4f e7       	ldi	r20, 0x7F	; 127
    3584:	57 e4       	ldi	r21, 0x47	; 71
    3586:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    358a:	18 16       	cp	r1, r24
    358c:	4c f5       	brge	.+82     	; 0x35e0 <main+0x6c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    358e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3590:	7c 85       	ldd	r23, Y+12	; 0x0c
    3592:	8d 85       	ldd	r24, Y+13	; 0x0d
    3594:	9e 85       	ldd	r25, Y+14	; 0x0e
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	40 e2       	ldi	r20, 0x20	; 32
    359c:	51 e4       	ldi	r21, 0x41	; 65
    359e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	bc 01       	movw	r22, r24
    35a8:	cd 01       	movw	r24, r26
    35aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	9e 83       	std	Y+6, r25	; 0x06
    35b4:	8d 83       	std	Y+5, r24	; 0x05
    35b6:	0f c0       	rjmp	.+30     	; 0x35d6 <main+0x6bc>
    35b8:	88 ec       	ldi	r24, 0xC8	; 200
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	9c 83       	std	Y+4, r25	; 0x04
    35be:	8b 83       	std	Y+3, r24	; 0x03
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	9c 81       	ldd	r25, Y+4	; 0x04
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	f1 f7       	brne	.-4      	; 0x35c4 <main+0x6aa>
    35c8:	9c 83       	std	Y+4, r25	; 0x04
    35ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	9e 81       	ldd	r25, Y+6	; 0x06
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	9e 83       	std	Y+6, r25	; 0x06
    35d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	9e 81       	ldd	r25, Y+6	; 0x06
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	69 f7       	brne	.-38     	; 0x35b8 <main+0x69e>
    35de:	14 c0       	rjmp	.+40     	; 0x3608 <main+0x6ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e0:	6f 81       	ldd	r22, Y+7	; 0x07
    35e2:	78 85       	ldd	r23, Y+8	; 0x08
    35e4:	89 85       	ldd	r24, Y+9	; 0x09
    35e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9e 83       	std	Y+6, r25	; 0x06
    35f2:	8d 83       	std	Y+5, r24	; 0x05
    35f4:	8d 81       	ldd	r24, Y+5	; 0x05
    35f6:	9e 81       	ldd	r25, Y+6	; 0x06
    35f8:	9a 83       	std	Y+2, r25	; 0x02
    35fa:	89 83       	std	Y+1, r24	; 0x01
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3600:	01 97       	sbiw	r24, 0x01	; 1
    3602:	f1 f7       	brne	.-4      	; 0x3600 <main+0x6e6>
    3604:	9a 83       	std	Y+2, r25	; 0x02
    3606:	89 83       	std	Y+1, r24	; 0x01
								// LED OFF indicates closed locker
			_delay_ms(100);
			LCD_voidsendstring("Enter password");
    3608:	87 ed       	ldi	r24, 0xD7	; 215
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidsendstring>
			 LCD_voidGoToXY(0,1);
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	61 e0       	ldi	r22, 0x01	; 1
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	0e 94 9b 11 	call	0x2336	; 0x2336 <LCD_voidGoToXY>

			errorStatus = enterPassword();			// Enter password to open the locker
    361c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <enterPassword>
    3620:	fe 01       	movw	r30, r28
    3622:	eb 5a       	subi	r30, 0xAB	; 171
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	80 83       	st	Z, r24
    3628:	08 c0       	rjmp	.+16     	; 0x363a <main+0x720>
			while (errorStatus) 				// Locker remains closed until user enters correct password
			{
				Buzzer_3_sec();				// Activate buzzer for 3 seconds
    362a:	0e 94 a7 14 	call	0x294e	; 0x294e <Buzzer_3_sec>
				errorStatus = enterPassword();		// Enter password to open the locker
    362e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <enterPassword>
    3632:	fe 01       	movw	r30, r28
    3634:	eb 5a       	subi	r30, 0xAB	; 171
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	80 83       	st	Z, r24
			_delay_ms(100);
			LCD_voidsendstring("Enter password");
			 LCD_voidGoToXY(0,1);

			errorStatus = enterPassword();			// Enter password to open the locker
			while (errorStatus) 				// Locker remains closed until user enters correct password
    363a:	fe 01       	movw	r30, r28
    363c:	eb 5a       	subi	r30, 0xAB	; 171
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 81       	ld	r24, Z
    3642:	88 23       	and	r24, r24
    3644:	91 f7       	brne	.-28     	; 0x362a <main+0x710>
			{
				Buzzer_3_sec();				// Activate buzzer for 3 seconds
				errorStatus = enterPassword();		// Enter password to open the locker
			}
			locker_closed = 0; 				// locker is now open
    3646:	fe 01       	movw	r30, r28
    3648:	ea 5a       	subi	r30, 0xAA	; 170
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	10 82       	st	Z, r1
    364e:	da cd       	rjmp	.-1100   	; 0x3204 <main+0x2ea>

00003650 <__udivmodqi4>:
    3650:	99 1b       	sub	r25, r25
    3652:	79 e0       	ldi	r23, 0x09	; 9
    3654:	04 c0       	rjmp	.+8      	; 0x365e <__udivmodqi4_ep>

00003656 <__udivmodqi4_loop>:
    3656:	99 1f       	adc	r25, r25
    3658:	96 17       	cp	r25, r22
    365a:	08 f0       	brcs	.+2      	; 0x365e <__udivmodqi4_ep>
    365c:	96 1b       	sub	r25, r22

0000365e <__udivmodqi4_ep>:
    365e:	88 1f       	adc	r24, r24
    3660:	7a 95       	dec	r23
    3662:	c9 f7       	brne	.-14     	; 0x3656 <__udivmodqi4_loop>
    3664:	80 95       	com	r24
    3666:	08 95       	ret

00003668 <__udivmodhi4>:
    3668:	aa 1b       	sub	r26, r26
    366a:	bb 1b       	sub	r27, r27
    366c:	51 e1       	ldi	r21, 0x11	; 17
    366e:	07 c0       	rjmp	.+14     	; 0x367e <__udivmodhi4_ep>

00003670 <__udivmodhi4_loop>:
    3670:	aa 1f       	adc	r26, r26
    3672:	bb 1f       	adc	r27, r27
    3674:	a6 17       	cp	r26, r22
    3676:	b7 07       	cpc	r27, r23
    3678:	10 f0       	brcs	.+4      	; 0x367e <__udivmodhi4_ep>
    367a:	a6 1b       	sub	r26, r22
    367c:	b7 0b       	sbc	r27, r23

0000367e <__udivmodhi4_ep>:
    367e:	88 1f       	adc	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	5a 95       	dec	r21
    3684:	a9 f7       	brne	.-22     	; 0x3670 <__udivmodhi4_loop>
    3686:	80 95       	com	r24
    3688:	90 95       	com	r25
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	08 95       	ret

00003690 <__prologue_saves__>:
    3690:	2f 92       	push	r2
    3692:	3f 92       	push	r3
    3694:	4f 92       	push	r4
    3696:	5f 92       	push	r5
    3698:	6f 92       	push	r6
    369a:	7f 92       	push	r7
    369c:	8f 92       	push	r8
    369e:	9f 92       	push	r9
    36a0:	af 92       	push	r10
    36a2:	bf 92       	push	r11
    36a4:	cf 92       	push	r12
    36a6:	df 92       	push	r13
    36a8:	ef 92       	push	r14
    36aa:	ff 92       	push	r15
    36ac:	0f 93       	push	r16
    36ae:	1f 93       	push	r17
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	ca 1b       	sub	r28, r26
    36ba:	db 0b       	sbc	r29, r27
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	09 94       	ijmp

000036c8 <__epilogue_restores__>:
    36c8:	2a 88       	ldd	r2, Y+18	; 0x12
    36ca:	39 88       	ldd	r3, Y+17	; 0x11
    36cc:	48 88       	ldd	r4, Y+16	; 0x10
    36ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    36d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    36d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    36d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    36d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    36d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    36da:	b9 84       	ldd	r11, Y+9	; 0x09
    36dc:	c8 84       	ldd	r12, Y+8	; 0x08
    36de:	df 80       	ldd	r13, Y+7	; 0x07
    36e0:	ee 80       	ldd	r14, Y+6	; 0x06
    36e2:	fd 80       	ldd	r15, Y+5	; 0x05
    36e4:	0c 81       	ldd	r16, Y+4	; 0x04
    36e6:	1b 81       	ldd	r17, Y+3	; 0x03
    36e8:	aa 81       	ldd	r26, Y+2	; 0x02
    36ea:	b9 81       	ldd	r27, Y+1	; 0x01
    36ec:	ce 0f       	add	r28, r30
    36ee:	d1 1d       	adc	r29, r1
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	ed 01       	movw	r28, r26
    36fc:	08 95       	ret

000036fe <_exit>:
    36fe:	f8 94       	cli

00003700 <__stop_program>:
    3700:	ff cf       	rjmp	.-2      	; 0x3700 <__stop_program>
